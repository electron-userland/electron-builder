{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$ref": "#/definitions/Configuration",
  "definitions": {
    "Configuration": {
      "type": "object",
      "properties": {
        "beforePack": {
          "anyOf": [
            {
              "$ref": "#/definitions/Hook%3CBeforePackContext%2Cvoid%3E"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The function (or path to file or module id) to be run before pack.\n\n```typescript (context: BeforePackContext): Promise<any> | any ```\n\n!!! example \"As function\"\n\n ```js  beforePack: async (context) => {    // your code  }  ```\n\nBecause in a configuration file you cannot use JavaScript, can be specified as a path to file or module id. Function must be exported as default export.\n\n```json \"build\": { \"beforePack\": \"./myBeforePackHook.js\" } ```\n\nFile `myBeforePackHook.js` in the project root directory:\n\n!!! example \"myBeforePackHook.js\"  ```js  exports.default = async function(context) {    // your custom code  }  ```"
        },
        "afterExtract": {
          "anyOf": [
            {
              "$ref": "#/definitions/Hook%3CAfterExtractContext%2Cvoid%3E"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The function (or path to file or module id) to be [run after the prebuilt Electron binary has been extracted to the output directory](#afterextract) Same setup as  {@link  beforePack }"
        },
        "afterPack": {
          "anyOf": [
            {
              "$ref": "#/definitions/Hook%3CAfterPackContext%2Cvoid%3E"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The function (or path to file or module id) to be [run after pack](#afterpack) (but before pack into distributable format and sign). Same setup as  {@link  beforePack }"
        },
        "afterSign": {
          "anyOf": [
            {
              "$ref": "#/definitions/Hook%3CAfterPackContext%2Cvoid%3E"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The function (or path to file or module id) to be [run after pack and sign](#aftersign) (but before pack into distributable format). Same setup as  {@link  beforePack }"
        },
        "artifactBuildStarted": {
          "anyOf": [
            {
              "$ref": "#/definitions/Hook%3CArtifactBuildStarted%2Cvoid%3E"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The function (or path to file or module id) to be run on artifact build start. Same setup as  {@link  beforePack }"
        },
        "artifactBuildCompleted": {
          "anyOf": [
            {
              "$ref": "#/definitions/Hook%3CArtifactCreated%2Cvoid%3E"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The function (or path to file or module id) to be run on artifact build completed. Same setup as  {@link  beforePack }"
        },
        "afterAllArtifactBuild": {
          "anyOf": [
            {
              "$ref": "#/definitions/Hook%3CBuildResult%2Cstring%5B%5D%3E"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The function (or path to file or module id) to be run after all artifacts are built.\n\n```typescript (buildResult: BuildResult): Promise<Array<string>> | Array<string> ```\n\nConfiguration in the same way as `afterPack` (see above).\n\n!!! example \"myAfterAllArtifactBuild.js\" ```js exports.default = function () {  // you can return additional files to publish  return [\"/path/to/additional/result/file\"] } ```"
        },
        "msiProjectCreated": {
          "anyOf": [
            {
              "$ref": "#/definitions/Hook%3Cstring%2Cvoid%3E"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The function (or path to file or module id) to be run after MSI project created on disk - not packed into .msi package yet."
        },
        "appxManifestCreated": {
          "anyOf": [
            {
              "$ref": "#/definitions/Hook%3Cstring%2Cvoid%3E"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The function (or path to file or module id) to be run after Appx manifest created on disk - not packed into .appx package yet."
        },
        "onNodeModuleFile": {
          "anyOf": [
            {
              "$ref": "#/definitions/Hook%3Cstring%2C(void%7Cboolean)%3E"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The function (or path to file or module id) to be [run on each node module](#onnodemodulefile) file. Returning `true`/`false` will determine whether to force include or to use the default copier logic"
        },
        "beforeBuild": {
          "anyOf": [
            {
              "$ref": "#/definitions/Hook%3CBeforeBuildContext%2C(boolean%7Cvoid)%3E"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The function (or path to file or module id) to be run before dependencies are installed or rebuilt. Works when `npmRebuild` is set to `true`. Resolving to `false` will skip dependencies install or rebuild.\n\nIf provided and `node_modules` are missing, it will not invoke production dependencies check."
        },
        "electronDist": {
          "anyOf": [
            {
              "$ref": "#/definitions/Hook%3CPrepareApplicationStageDirectoryOptions%2Cstring%3E"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The function (or path to file or module id) to be run when staging the electron artifact environment. Returns the path to custom Electron build (e.g. `~/electron/out/R`) or folder of electron zips.\n\nZip files must follow the pattern `electron-v${version}-${platformName}-${arch}.zip`, otherwise it will be assumed to be an unpacked Electron app directory"
        },
        "files": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A [glob patterns](./file-patterns.md) relative to the [app directory](configuration.md#directories), which specifies which files to include when copying files to create the package.\n\nDefaults to: ```json [ \"**\\/*\", \"!**\\/node_modules/*\\/{CHANGELOG.md,README.md,README,readme.md,readme}\", \"!**\\/node_modules/*\\/{test,__tests__,tests,powered-test,example,examples}\", \"!**\\/node_modules/*.d.ts\", \"!**\\/node_modules/.bin\", \"!**\\/*.{iml,o,hprof,orig,pyc,pyo,rbc,swp,csproj,sln,xproj}\", \"!.editorconfig\", \"!**\\/._*\", \"!**\\/{.DS_Store,.git,.hg,.svn,CVS,RCS,SCCS,.gitignore,.gitattributes}\", \"!**\\/{__pycache__,thumbs.db,.flowconfig,.idea,.vs,.nyc_output}\", \"!**\\/{appveyor.yml,.travis.yml,circle.yml}\", \"!**\\/{npm-debug.log,yarn.lock,.yarn-integrity,.yarn-metadata.json}\" ] ```\n\nDevelopment dependencies are never copied in any case. You don't need to ignore it explicitly. Hidden files are not ignored by default, but all files that should be ignored, are ignored by default.\n\nDefault pattern \\`**\\/*\\` **is not added to your custom** if some of your patterns is not ignore (i.e. not starts with `!`). `package.json` and \\`**\\/node_modules/**\\/*` (only production dependencies will be copied) is added to your custom in any case. All default ignores are added in any case — you don't need to repeat it if you configure own patterns.\n\nMay be specified in the platform options (e.g. in the [mac](mac.md)).\n\nYou may also specify custom source and destination directories by using `FileSet` objects instead of simple glob patterns.\n\n```json [ { \"from\": \"path/to/source\", \"to\": \"path/to/destination\", \"filter\": [\"**\\/*\", \"!foo/*.js\"] } ] ```\n\nYou can use [file macros](./file-patterns.md#file-macros) in the `from` and `to` fields as well. `from` and `to` can be files and you can use this to [rename](https://github.com/electron-userland/electron-builder/issues/1119) a file while packaging."
        },
        "extraResources": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A [glob patterns](./file-patterns.md) relative to the project directory, when specified, copy the file or directory with matching names directly into the app's resources directory (`Contents/Resources` for MacOS, `resources` for Linux and Windows).\n\nFile patterns (and support for `from` and `to` fields) the same as for [files](#files)."
        },
        "extraFiles": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The same as [extraResources](#extraresources) but copy into the app's content directory (`Contents` for MacOS, root directory for Linux and Windows)."
        },
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options)."
        },
        "publish": {
          "$ref": "#/definitions/Publish",
          "description": "Publisher configuration. See [Auto Update](./publish.md) for more information."
        },
        "appId": {
          "type": [
            "string",
            "null"
          ],
          "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as [Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
          "default": "com.electron.${name}"
        },
        "executableName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The executable name. Defaults to `productName`."
        },
        "compression": {
          "anyOf": [
            {
              "$ref": "#/definitions/CompressionLevel"
            },
            {
              "type": "null"
            }
          ],
          "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
          "default": "normal"
        },
        "disableDefaultIgnoredFiles": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Whether to exclude all default ignored files(https://www.electron.build/contents#files) and options. Defaults to `false`.",
          "default": false
        },
        "asar": {
          "anyOf": [
            {
              "$ref": "#/definitions/AsarOptions"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#asarUnpack) - please file an issue if this doesn't work.",
          "default": true
        },
        "asarUnpack": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A [glob patterns](./file-patterns.md) relative to the [app directory](#directories), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive."
        },
        "icon": {
          "type": [
            "string",
            "null"
          ]
        },
        "fileAssociations": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileAssociation"
              }
            },
            {
              "$ref": "#/definitions/FileAssociation"
            }
          ],
          "description": "The file associations."
        },
        "protocols": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Protocol"
              }
            },
            {
              "$ref": "#/definitions/Protocol"
            }
          ],
          "description": "The URL protocol schemes."
        },
        "electronLanguages": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ],
          "description": "The electron locales to keep. By default, all Electron locales used as-is."
        },
        "forceCodeSigning": {
          "type": "boolean",
          "description": "Whether to fail if the application is not signed (to prevent unsigned app if code signing configuration is not correct).",
          "default": false
        },
        "electronUpdaterCompatibility": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [electron-updater compatibility](./auto-update.md#compatibility) semver range."
        },
        "detectUpdateChannel": {
          "type": "boolean",
          "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`. This does *not* apply to github publishing, which will [never auto-detect the update channel](https://github.com/electron-userland/electron-builder/issues/8589).",
          "default": true
        },
        "generateUpdatesFilesForAllChannels": {
          "type": "boolean",
          "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
          "default": false
        },
        "releaseInfo": {
          "$ref": "#/definitions/ReleaseInfo",
          "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\" ```"
        },
        "target": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/TargetConfiguration"
                  }
                ]
              }
            },
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/TargetConfiguration"
            },
            {
              "type": "null"
            }
          ]
        },
        "cscLink": {
          "type": [
            "string",
            "null"
          ]
        },
        "cscKeyPassword": {
          "type": [
            "string",
            "null"
          ]
        },
        "defaultArch": {
          "type": "string"
        },
        "productName": {
          "type": [
            "string",
            "null"
          ],
          "description": "As [name](#metadata), but allows you to specify a product name for your executable which contains spaces and other special characters not allowed in the [name property](https://docs.npmjs.com/files/package.json#name). If not specified inside of the `build` configuration, `productName` property defined at the top level of `package.json` is used. If not specified at the top level of `package.json`, [name property](https://docs.npmjs.com/files/package.json#name) is used."
        },
        "copyright": {
          "type": [
            "string",
            "null"
          ],
          "description": "The human-readable copyright line for the app.",
          "default": "Copyright © year ${author}"
        },
        "directories": {
          "anyOf": [
            {
              "$ref": "#/definitions/MetadataDirectories"
            },
            {
              "type": "null"
            }
          ],
          "description": "Directories for build resources"
        },
        "mac": {
          "anyOf": [
            {
              "$ref": "#/definitions/MacConfiguration"
            },
            {
              "type": "null"
            }
          ],
          "description": "Options related to how build macOS targets."
        },
        "mas": {
          "anyOf": [
            {
              "$ref": "#/definitions/MasConfiguration"
            },
            {
              "type": "null"
            }
          ],
          "description": "MAS (Mac Application Store) options."
        },
        "masDev": {
          "anyOf": [
            {
              "$ref": "#/definitions/MasConfiguration"
            },
            {
              "type": "null"
            }
          ],
          "description": "MAS (Mac Application Store) development options (`mas-dev` target)."
        },
        "dmg": {
          "anyOf": [
            {
              "$ref": "#/definitions/DmgOptions"
            },
            {
              "type": "null"
            }
          ],
          "description": "macOS DMG options."
        },
        "pkg": {
          "anyOf": [
            {
              "$ref": "#/definitions/PkgOptions"
            },
            {
              "type": "null"
            }
          ],
          "description": "macOS PKG options."
        },
        "win": {
          "anyOf": [
            {
              "$ref": "#/definitions/WindowsConfiguration"
            },
            {
              "type": "null"
            }
          ],
          "description": "Options related to how build Windows targets."
        },
        "nsis": {
          "anyOf": [
            {
              "$ref": "#/definitions/NsisOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "nsisWeb": {
          "anyOf": [
            {
              "$ref": "#/definitions/NsisWebOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "portable": {
          "anyOf": [
            {
              "$ref": "#/definitions/PortableOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "appx": {
          "anyOf": [
            {
              "$ref": "#/definitions/AppXOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "msi": {
          "anyOf": [
            {
              "$ref": "#/definitions/MsiOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "msiWrapped": {
          "anyOf": [
            {
              "$ref": "#/definitions/MsiWrappedOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "squirrelWindows": {
          "anyOf": [
            {
              "$ref": "#/definitions/SquirrelWindowsOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "linux": {
          "anyOf": [
            {
              "$ref": "#/definitions/LinuxConfiguration"
            },
            {
              "type": "null"
            }
          ],
          "description": "Options related to how build Linux targets."
        },
        "deb": {
          "anyOf": [
            {
              "$ref": "#/definitions/DebOptions"
            },
            {
              "type": "null"
            }
          ],
          "description": "Debian package options."
        },
        "snap": {
          "anyOf": [
            {
              "$ref": "#/definitions/SnapOptions"
            },
            {
              "type": "null"
            }
          ],
          "description": "Snap options."
        },
        "appImage": {
          "anyOf": [
            {
              "$ref": "#/definitions/AppImageOptions"
            },
            {
              "type": "null"
            }
          ],
          "description": "AppImage options."
        },
        "flatpak": {
          "anyOf": [
            {
              "$ref": "#/definitions/FlatpakOptions"
            },
            {
              "type": "null"
            }
          ],
          "description": "Flatpak options."
        },
        "pacman": {
          "anyOf": [
            {
              "$ref": "#/definitions/LinuxTargetSpecificOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "rpm": {
          "anyOf": [
            {
              "$ref": "#/definitions/LinuxTargetSpecificOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "freebsd": {
          "anyOf": [
            {
              "$ref": "#/definitions/LinuxTargetSpecificOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "p5p": {
          "anyOf": [
            {
              "$ref": "#/definitions/LinuxTargetSpecificOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "apk": {
          "anyOf": [
            {
              "$ref": "#/definitions/LinuxTargetSpecificOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "buildDependenciesFromSource": {
          "type": "boolean",
          "description": "Whether to build the application native dependencies from source.",
          "default": false
        },
        "nodeGypRebuild": {
          "type": "boolean",
          "description": "Whether to execute `node-gyp rebuild` before starting to package the app.\n\nDon't [use](https://github.com/electron-userland/electron-builder/issues/683#issuecomment-241214075) [npm](http://electron.atom.io/docs/tutorial/using-native-node-modules/#using-npm) (neither `.npmrc`) for configuring electron headers. Use `electron-builder node-gyp-rebuild` instead.",
          "default": false
        },
        "npmArgs": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Additional command line arguments to use when installing app native deps."
        },
        "npmRebuild": {
          "type": "boolean",
          "description": "Whether to [rebuild](https://docs.npmjs.com/cli/rebuild) native dependencies before starting to package the app.",
          "default": true
        },
        "nativeRebuilder": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "legacy",
            "sequential",
            "parallel",
            null
          ],
          "description": "Use `legacy` app-builder binary for installing native dependencies, or `@electron/rebuild` in `sequential` or `parallel` compilation modes.",
          "default": "sequential"
        },
        "buildNumber": {
          "type": [
            "string",
            "null"
          ],
          "description": "The build number. Maps to the `--iteration` flag for builds using FPM on Linux. If not defined, then it will fallback to `BUILD_NUMBER` or `TRAVIS_BUILD_NUMBER` or `APPVEYOR_BUILD_NUMBER` or `CIRCLE_BUILD_NUM` or `BUILD_BUILDNUMBER` or `CI_PIPELINE_IID` env."
        },
        "buildVersion": {
          "type": [
            "string",
            "null"
          ],
          "description": "The build version. Maps to the `CFBundleVersion` on macOS, and `FileVersion` metadata property on Windows. Defaults to the `version`. If `buildVersion` is not defined and `buildNumber` (or one of the `buildNumber` envs) is defined, it will be used as a build version (`version.buildNumber`)."
        },
        "downloadAlternateFFmpeg": {
          "type": "boolean",
          "description": "Whether to download the alternate FFmpeg library from Electron's release assets and replace the default FFmpeg library prior to signing"
        },
        "extraMetadata": {
          "description": "Inject properties to `package.json`."
        },
        "includePdb": {
          "type": "boolean",
          "description": "Whether to include PDB files.",
          "default": false
        },
        "removePackageScripts": {
          "type": "boolean",
          "description": "Whether to remove `scripts` field from `package.json` files.",
          "default": true
        },
        "removePackageKeywords": {
          "type": "boolean",
          "description": "Whether to remove `keywords` field from `package.json` files.",
          "default": true
        },
        "electronFuses": {
          "anyOf": [
            {
              "$ref": "#/definitions/FuseOptionsV1"
            },
            {
              "type": "null"
            }
          ],
          "description": "Options to pass to `@electron/fuses` Ref: https://github.com/electron/fuses"
        },
        "concurrency": {
          "anyOf": [
            {
              "$ref": "#/definitions/Concurrency"
            },
            {
              "type": "null"
            }
          ],
          "description": "[Experimental] Configuration for concurrent builds."
        },
        "electronCompile": {
          "type": "boolean",
          "description": "Whether to use [electron-compile](http://github.com/electron/electron-compile) to compile app. Defaults to `true` if `electron-compile` in the dependencies. And `false` if in the `devDependencies` or doesn't specified."
        },
        "electronDownload": {
          "$ref": "#/definitions/ElectronDownloadOptions",
          "description": "The [electron-download](https://github.com/electron-userland/electron-download#usage) options."
        },
        "electronBranding": {
          "$ref": "#/definitions/ElectronBrandingOptions",
          "description": "The branding used by Electron's distributables. This is needed if a fork has modified Electron's BRANDING.json file."
        },
        "electronVersion": {
          "type": [
            "string",
            "null"
          ],
          "description": "The version of electron you are packaging for. Defaults to version of `electron`, `electron-prebuilt` or `electron-prebuilt-compile` dependency."
        },
        "extends": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The name of a built-in configuration preset (currently, only `react-cra` is supported) or any number of paths to config files (relative to project dir).\n\nThe latter allows to mixin a config from multiple other configs, as if you `Object.assign` them, but properly combine `files` glob patterns.\n\nIf `react-scripts` in the app dependencies, `react-cra` will be set automatically. Set to `null` to disable automatic detection."
        },
        "nodeVersion": {
          "type": [
            "string",
            "null"
          ],
          "description": "*libui-based frameworks only* The version of NodeJS you are packaging for. You can set it to `current` to set the Node.js version that you use to run."
        },
        "launchUiVersion": {
          "type": [
            "boolean",
            "string",
            "null"
          ],
          "description": "*libui-based frameworks only* The version of LaunchUI you are packaging for. Applicable for Windows only. Defaults to version suitable for used framework version."
        },
        "framework": {
          "type": [
            "string",
            "null"
          ],
          "description": "The framework name. One of `electron`, `proton`, `libui`. Defaults to `electron`."
        },
        "disableSanityCheckAsar": {
          "type": "boolean",
          "description": "Whether to disable sanity check asar package (useful for custom electron forks that implement their own encrypted integrity validation)",
          "default": false
        }
      },
      "additionalProperties": false
    },
    "Hook<BeforePackContext,void>": {
      "$comment": "(contextOrPath: T) => Promise<V> | V",
      "type": "object",
      "properties": {
        "namedArgs": {
          "type": "object",
          "properties": {
            "contextOrPath": {
              "$ref": "#/definitions/BeforePackContext"
            }
          },
          "required": [
            "contextOrPath"
          ],
          "additionalProperties": false
        }
      }
    },
    "BeforePackContext": {
      "$ref": "#/definitions/PackContext"
    },
    "PackContext": {
      "type": "object",
      "properties": {
        "outDir": {
          "type": "string"
        },
        "appOutDir": {
          "type": "string"
        },
        "packager": {
          "$ref": "#/definitions/PlatformPackager%3Cany%3E"
        },
        "electronPlatformName": {
          "type": "string"
        },
        "arch": {
          "$ref": "#/definitions/Arch"
        },
        "targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Target"
          }
        }
      },
      "required": [
        "outDir",
        "appOutDir",
        "packager",
        "electronPlatformName",
        "arch",
        "targets"
      ],
      "additionalProperties": false
    },
    "PlatformPackager<any>": {
      "type": "object",
      "properties": {
        "platformSpecificBuildOptions": {},
        "appInfo": {
          "$ref": "#/definitions/AppInfo"
        },
        "info": {
          "$ref": "#/definitions/Packager"
        },
        "platform": {
          "$ref": "#/definitions/Platform"
        }
      },
      "required": [
        "platformSpecificBuildOptions",
        "appInfo",
        "info",
        "platform"
      ],
      "additionalProperties": false
    },
    "AppInfo": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "shortVersion": {
          "type": "string"
        },
        "shortVersionWindows": {
          "type": "string"
        },
        "buildNumber": {
          "type": "string"
        },
        "buildVersion": {
          "type": "string"
        },
        "productName": {
          "type": "string"
        },
        "sanitizedProductName": {
          "type": "string"
        },
        "productFilename": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "version",
        "buildVersion",
        "productName",
        "sanitizedProductName",
        "productFilename"
      ],
      "additionalProperties": false
    },
    "Packager": {
      "type": "object",
      "properties": {
        "projectDir": {
          "type": "string"
        },
        "isTwoPackageJsonProjectLayoutUsed": {
          "type": "boolean"
        },
        "_appInfo": {
          "anyOf": [
            {
              "$ref": "#/definitions/AppInfo"
            },
            {
              "type": "null"
            }
          ]
        },
        "tempDirManager": {
          "$ref": "#/definitions/TmpDir"
        },
        "options": {
          "$ref": "#/definitions/PackagerOptions"
        },
        "debugLogger": {
          "$ref": "#/definitions/DebugLogger"
        },
        "stageDirPathCustomizer": {
          "$comment": "(target: Target, packager: PlatformPackager<any>, arch: Arch) => string",
          "type": "object",
          "properties": {
            "namedArgs": {
              "type": "object",
              "properties": {
                "target": {
                  "$ref": "#/definitions/Target"
                },
                "packager": {
                  "$ref": "#/definitions/PlatformPackager%3Cany%3E"
                },
                "arch": {
                  "$ref": "#/definitions/Arch"
                }
              },
              "required": [
                "target",
                "packager",
                "arch"
              ],
              "additionalProperties": false
            }
          }
        },
        "cancellationToken": {
          "$ref": "#/definitions/CancellationToken"
        }
      },
      "required": [
        "projectDir",
        "isTwoPackageJsonProjectLayoutUsed",
        "_appInfo",
        "tempDirManager",
        "options",
        "debugLogger",
        "stageDirPathCustomizer",
        "cancellationToken"
      ],
      "additionalProperties": false
    },
    "TmpDir": {
      "type": "object",
      "additionalProperties": false
    },
    "PackagerOptions": {
      "type": "object",
      "properties": {
        "targets": {
          "type": "object",
          "properties": {
            "size": {
              "type": "number"
            }
          },
          "required": [
            "size"
          ],
          "additionalProperties": false
        },
        "mac": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "linux": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "win": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "projectDir": {
          "type": [
            "string",
            "null"
          ]
        },
        "platformPackagerFactory": {
          "anyOf": [
            {
              "$comment": "(info: Packager, platform: Platform) => PlatformPackager<any>",
              "type": "object",
              "properties": {
                "namedArgs": {
                  "type": "object",
                  "properties": {
                    "info": {
                      "$ref": "#/definitions/Packager"
                    },
                    "platform": {
                      "$ref": "#/definitions/Platform"
                    }
                  },
                  "required": [
                    "info",
                    "platform"
                  ],
                  "additionalProperties": false
                }
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "config": {
          "anyOf": [
            {
              "$ref": "#/definitions/Configuration"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "effectiveOptionComputed": {
          "$comment": "(options: any) => Promise<boolean>",
          "type": "object",
          "properties": {
            "namedArgs": {
              "type": "object",
              "properties": {
                "options": {}
              },
              "required": [
                "options"
              ],
              "additionalProperties": false
            }
          }
        },
        "prepackaged": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "Platform": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "buildConfigurationKey": {
          "type": "string"
        },
        "nodeName": {
          "$ref": "#/definitions/global.NodeJS.Platform"
        }
      },
      "required": [
        "name",
        "buildConfigurationKey",
        "nodeName"
      ],
      "additionalProperties": false
    },
    "global.NodeJS.Platform": {
      "type": "string",
      "enum": [
        "aix",
        "android",
        "darwin",
        "freebsd",
        "haiku",
        "linux",
        "openbsd",
        "sunos",
        "win32",
        "cygwin",
        "netbsd"
      ]
    },
    "DebugLogger": {
      "type": "object",
      "properties": {
        "isEnabled": {
          "type": "boolean"
        },
        "data": {
          "type": "object",
          "properties": {
            "size": {
              "type": "number"
            }
          },
          "required": [
            "size"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "isEnabled",
        "data"
      ],
      "additionalProperties": false
    },
    "Target": {
      "type": "object",
      "properties": {
        "outDir": {
          "type": "string"
        },
        "options": {
          "anyOf": [
            {
              "$ref": "#/definitions/TargetSpecificOptions"
            },
            {
              "$ref": "#/definitions/Nullish"
            }
          ]
        },
        "buildQueueManager": {
          "$ref": "#/definitions/AsyncTaskManager"
        },
        "name": {
          "type": "string"
        },
        "isAsyncSupported": {
          "type": "boolean"
        }
      },
      "required": [
        "outDir",
        "options",
        "buildQueueManager",
        "name",
        "isAsyncSupported"
      ],
      "additionalProperties": false
    },
    "TargetSpecificOptions": {
      "type": "object",
      "properties": {
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template)."
        },
        "publish": {
          "$ref": "#/definitions/Publish"
        }
      },
      "additionalProperties": false
    },
    "Publish": {
      "anyOf": [
        {
          "$ref": "#/definitions/AllPublishOptions"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllPublishOptions"
          }
        },
        {
          "type": "null"
        }
      ]
    },
    "AllPublishOptions": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/GithubOptions"
        },
        {
          "$ref": "#/definitions/S3Options"
        },
        {
          "$ref": "#/definitions/SpacesOptions"
        },
        {
          "$ref": "#/definitions/GenericServerOptions"
        },
        {
          "$ref": "#/definitions/CustomPublishOptions"
        },
        {
          "$ref": "#/definitions/KeygenOptions"
        },
        {
          "$ref": "#/definitions/SnapStoreOptions"
        },
        {
          "$ref": "#/definitions/BitbucketOptions"
        }
      ]
    },
    "GithubOptions": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string",
          "const": "github",
          "description": "The provider. Must be `github`."
        },
        "publisherName": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "updaterCacheDirName": {
          "type": [
            "string",
            "null"
          ]
        },
        "publishAutoUpdate": {
          "type": "boolean",
          "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers). Thus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
          "default": true
        },
        "requestHeaders": {
          "$ref": "#/definitions/OutgoingHttpHeaders",
          "description": "Any custom request headers"
        },
        "timeout": {
          "type": [
            "number",
            "null"
          ],
          "description": "Request timeout in milliseconds. (Default is 2 minutes; O is ignored)",
          "default": 120000
        },
        "repo": {
          "type": [
            "string",
            "null"
          ],
          "description": "The repository name. [Detected automatically](#github-repository-and-bintray-package)."
        },
        "owner": {
          "type": [
            "string",
            "null"
          ],
          "description": "The owner."
        },
        "vPrefixedTagName": {
          "type": "boolean",
          "description": "Whether to use `v`-prefixed tag name.",
          "default": true
        },
        "host": {
          "type": [
            "string",
            "null"
          ],
          "description": "The host (including the port if need).",
          "default": "github.com"
        },
        "protocol": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "https",
            "http",
            null
          ],
          "description": "The protocol. GitHub Publisher supports only `https`.",
          "default": "https"
        },
        "token": {
          "type": [
            "string",
            "null"
          ],
          "description": "The access token to support auto-update from private github repositories. Never specify it in the configuration files. Only for [setFeedURL](./auto-update.md#appupdatersetfeedurloptions)."
        },
        "private": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Whether to use private github auto-update provider if `GH_TOKEN` environment variable is defined. See [Private GitHub Update Repo](./auto-update.md#private-github-update-repo)."
        },
        "channel": {
          "type": [
            "string",
            "null"
          ],
          "description": "The channel.",
          "default": "latest"
        },
        "releaseType": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "draft",
            "prerelease",
            "release",
            null
          ],
          "description": "The type of release. By default `draft` release will be created.\n\nAlso you can set release type using environment variable. If `EP_DRAFT`is set to `true` — `draft`, if `EP_PRE_RELEASE`is set to `true` — `prerelease`.",
          "default": "draft"
        }
      },
      "required": [
        "provider"
      ],
      "additionalProperties": false,
      "description": "[GitHub](https://help.github.com/articles/about-releases/) options.\n\nGitHub [personal access token](https://help.github.com/articles/creating-an-access-token-for-command-line-use/) is required. You can generate by going to [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new). The access token should have the repo scope/permission. Define `GH_TOKEN` environment variable."
    },
    "OutgoingHttpHeaders": {
      "type": "object",
      "properties": {
        "accept": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "accept-charset": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "accept-encoding": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "accept-language": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "accept-ranges": {
          "type": "string"
        },
        "access-control-allow-credentials": {
          "type": "string"
        },
        "access-control-allow-headers": {
          "type": "string"
        },
        "access-control-allow-methods": {
          "type": "string"
        },
        "access-control-allow-origin": {
          "type": "string"
        },
        "access-control-expose-headers": {
          "type": "string"
        },
        "access-control-max-age": {
          "type": "string"
        },
        "access-control-request-headers": {
          "type": "string"
        },
        "access-control-request-method": {
          "type": "string"
        },
        "age": {
          "type": "string"
        },
        "allow": {
          "type": "string"
        },
        "authorization": {
          "type": "string"
        },
        "cache-control": {
          "type": "string"
        },
        "cdn-cache-control": {
          "type": "string"
        },
        "connection": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "content-disposition": {
          "type": "string"
        },
        "content-encoding": {
          "type": "string"
        },
        "content-language": {
          "type": "string"
        },
        "content-length": {
          "type": [
            "string",
            "number"
          ]
        },
        "content-location": {
          "type": "string"
        },
        "content-range": {
          "type": "string"
        },
        "content-security-policy": {
          "type": "string"
        },
        "content-security-policy-report-only": {
          "type": "string"
        },
        "content-type": {
          "type": "string"
        },
        "cookie": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "dav": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "dnt": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "expect": {
          "type": "string"
        },
        "expires": {
          "type": "string"
        },
        "forwarded": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "if-match": {
          "type": "string"
        },
        "if-modified-since": {
          "type": "string"
        },
        "if-none-match": {
          "type": "string"
        },
        "if-range": {
          "type": "string"
        },
        "if-unmodified-since": {
          "type": "string"
        },
        "last-modified": {
          "type": "string"
        },
        "link": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "location": {
          "type": "string"
        },
        "max-forwards": {
          "type": "string"
        },
        "origin": {
          "type": "string"
        },
        "pragma": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "proxy-authenticate": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "proxy-authorization": {
          "type": "string"
        },
        "public-key-pins": {
          "type": "string"
        },
        "public-key-pins-report-only": {
          "type": "string"
        },
        "range": {
          "type": "string"
        },
        "referer": {
          "type": "string"
        },
        "referrer-policy": {
          "type": "string"
        },
        "refresh": {
          "type": "string"
        },
        "retry-after": {
          "type": "string"
        },
        "sec-websocket-accept": {
          "type": "string"
        },
        "sec-websocket-extensions": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "sec-websocket-key": {
          "type": "string"
        },
        "sec-websocket-protocol": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "sec-websocket-version": {
          "type": "string"
        },
        "server": {
          "type": "string"
        },
        "set-cookie": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "strict-transport-security": {
          "type": "string"
        },
        "te": {
          "type": "string"
        },
        "trailer": {
          "type": "string"
        },
        "transfer-encoding": {
          "type": "string"
        },
        "user-agent": {
          "type": "string"
        },
        "upgrade": {
          "type": "string"
        },
        "upgrade-insecure-requests": {
          "type": "string"
        },
        "vary": {
          "type": "string"
        },
        "via": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "warning": {
          "type": "string"
        },
        "www-authenticate": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "x-content-type-options": {
          "type": "string"
        },
        "x-dns-prefetch-control": {
          "type": "string"
        },
        "x-frame-options": {
          "type": "string"
        },
        "x-xss-protection": {
          "type": "string"
        }
      },
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/OutgoingHttpHeader"
          },
          {
            "not": {}
          }
        ]
      }
    },
    "OutgoingHttpHeader": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "S3Options": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string",
          "const": "s3",
          "description": "The provider. Must be `s3`."
        },
        "publisherName": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "updaterCacheDirName": {
          "type": [
            "string",
            "null"
          ]
        },
        "publishAutoUpdate": {
          "type": "boolean",
          "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers). Thus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
          "default": true
        },
        "requestHeaders": {
          "$ref": "#/definitions/OutgoingHttpHeaders",
          "description": "Any custom request headers"
        },
        "timeout": {
          "type": [
            "number",
            "null"
          ],
          "description": "Request timeout in milliseconds. (Default is 2 minutes; O is ignored)",
          "default": 120000
        },
        "channel": {
          "type": [
            "string",
            "null"
          ],
          "description": "The update channel.",
          "default": "latest"
        },
        "path": {
          "type": [
            "string",
            "null"
          ],
          "description": "The directory path.",
          "default": "/"
        },
        "acl": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "private",
            "public-read",
            null
          ],
          "description": "The ACL. Set to `null` to not [add](https://github.com/electron-userland/electron-builder/issues/1822).\n\nPlease see [required permissions for the S3 provider](https://github.com/electron-userland/electron-builder/issues/1618#issuecomment-314679128).",
          "default": "public-read"
        },
        "bucket": {
          "type": "string",
          "description": "The bucket name."
        },
        "region": {
          "type": [
            "string",
            "null"
          ],
          "description": "The region. Is determined and set automatically when publishing."
        },
        "storageClass": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "STANDARD",
            "REDUCED_REDUNDANCY",
            "STANDARD_IA",
            null
          ],
          "description": "The type of storage to use for the object.",
          "default": "STANDARD"
        },
        "encryption": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "AES256",
            "aws:kms",
            null
          ],
          "description": "Server-side encryption algorithm to use for the object."
        },
        "endpoint": {
          "type": [
            "string",
            "null"
          ],
          "description": "The endpoint URI to send requests to. The default endpoint is built from the configured region. The endpoint should be a string like `https://{service}.{region}.amazonaws.com`."
        },
        "accelerate": {
          "type": "boolean",
          "description": "If set to true, this will enable the s3 accelerated endpoint These endpoints have a particular format of:  ${bucketname}.s3-accelerate.amazonaws.com"
        },
        "forcePathStyle": {
          "type": "boolean",
          "description": "When true, force a path-style endpoint to be used where the bucket name is part of the path. [Path-style Access](https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#path-style-access)"
        }
      },
      "required": [
        "bucket",
        "provider"
      ],
      "additionalProperties": false,
      "description": "[Amazon S3](https://aws.amazon.com/s3/) options. AWS credentials are required, please see [getting your credentials](http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/getting-your-credentials.html). To set credentials define `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` [environment variables](http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-node-credentials-environment.html) directly, or use [~/.aws/credentials](http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-node-credentials-shared.html) file, or use [~/.aws/config](https://docs.aws.amazon.com/sdkref/latest/guide/file-format.html) file. For the last method to work you will also need to define `AWS_SDK_LOAD_CONFIG=1` environment variable.\n\nExample configuration:\n\n```json { \"build\":  \"publish\": {    \"provider\": \"s3\",    \"bucket\": \"bucket-name\"  } } } ```"
    },
    "SpacesOptions": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string",
          "const": "spaces",
          "description": "The provider. Must be `spaces`."
        },
        "publisherName": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "updaterCacheDirName": {
          "type": [
            "string",
            "null"
          ]
        },
        "publishAutoUpdate": {
          "type": "boolean",
          "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers). Thus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
          "default": true
        },
        "requestHeaders": {
          "$ref": "#/definitions/OutgoingHttpHeaders",
          "description": "Any custom request headers"
        },
        "timeout": {
          "type": [
            "number",
            "null"
          ],
          "description": "Request timeout in milliseconds. (Default is 2 minutes; O is ignored)",
          "default": 120000
        },
        "channel": {
          "type": [
            "string",
            "null"
          ],
          "description": "The update channel.",
          "default": "latest"
        },
        "path": {
          "type": [
            "string",
            "null"
          ],
          "description": "The directory path.",
          "default": "/"
        },
        "acl": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "private",
            "public-read",
            null
          ],
          "description": "The ACL. Set to `null` to not [add](https://github.com/electron-userland/electron-builder/issues/1822).",
          "default": "public-read"
        },
        "name": {
          "type": "string",
          "description": "The space name."
        },
        "region": {
          "type": "string",
          "description": "The region (e.g. `nyc3`)."
        }
      },
      "required": [
        "name",
        "provider",
        "region"
      ],
      "additionalProperties": false,
      "description": "[DigitalOcean Spaces](https://www.digitalocean.com/community/tutorials/an-introduction-to-digitalocean-spaces) options. Access key is required, define `DO_KEY_ID` and `DO_SECRET_KEY` environment variables."
    },
    "GenericServerOptions": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string",
          "const": "generic",
          "description": "The provider. Must be `generic`."
        },
        "publisherName": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "updaterCacheDirName": {
          "type": [
            "string",
            "null"
          ]
        },
        "publishAutoUpdate": {
          "type": "boolean",
          "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers). Thus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
          "default": true
        },
        "requestHeaders": {
          "$ref": "#/definitions/OutgoingHttpHeaders",
          "description": "Any custom request headers"
        },
        "timeout": {
          "type": [
            "number",
            "null"
          ],
          "description": "Request timeout in milliseconds. (Default is 2 minutes; O is ignored)",
          "default": 120000
        },
        "url": {
          "type": "string",
          "description": "The base url. e.g. `https://bucket_name.s3.amazonaws.com`."
        },
        "channel": {
          "type": [
            "string",
            "null"
          ],
          "description": "The channel.",
          "default": "latest"
        },
        "useMultipleRangeRequest": {
          "type": "boolean",
          "description": "Whether to use multiple range requests for differential update. Defaults to `true` if `url` doesn't contain `s3.amazonaws.com`."
        }
      },
      "required": [
        "provider",
        "url"
      ],
      "additionalProperties": false,
      "description": "Generic (any HTTP(S) server) options. In all publish options [File Macros](./file-patterns.md#file-macros) are supported."
    },
    "CustomPublishOptions": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string",
          "const": "custom",
          "description": "The provider. Must be `custom`."
        },
        "updateProvider": {
          "$comment": "new (options: CustomPublishOptionsBase, updater: any, runtimeOptions: any) => any",
          "type": "object",
          "properties": {
            "namedArgs": {
              "type": "object",
              "properties": {
                "options": {
                  "$ref": "#/definitions/CustomPublishOptionsBase"
                },
                "updater": {},
                "runtimeOptions": {}
              },
              "required": [
                "options",
                "updater",
                "runtimeOptions"
              ],
              "additionalProperties": false
            }
          },
          "description": "The Provider to provide UpdateInfo regarding available updates.  Required to use custom providers with electron-updater."
        }
      },
      "required": [
        "provider"
      ]
    },
    "CustomPublishOptionsBase": {
      "type": "object"
    },
    "KeygenOptions": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string",
          "const": "keygen",
          "description": "The provider. Must be `keygen`."
        },
        "publisherName": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "updaterCacheDirName": {
          "type": [
            "string",
            "null"
          ]
        },
        "publishAutoUpdate": {
          "type": "boolean",
          "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers). Thus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
          "default": true
        },
        "requestHeaders": {
          "$ref": "#/definitions/OutgoingHttpHeaders",
          "description": "Any custom request headers"
        },
        "timeout": {
          "type": [
            "number",
            "null"
          ],
          "description": "Request timeout in milliseconds. (Default is 2 minutes; O is ignored)",
          "default": 120000
        },
        "host": {
          "type": "string",
          "description": "Keygen host for self-hosted instances",
          "default": "api.keygen.sh"
        },
        "account": {
          "type": "string",
          "description": "Keygen account's UUID"
        },
        "product": {
          "type": "string",
          "description": "Keygen product's UUID"
        },
        "channel": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "stable",
            "rc",
            "beta",
            "alpha",
            "dev",
            null
          ],
          "description": "The channel.",
          "default": "stable"
        },
        "platform": {
          "type": [
            "string",
            "null"
          ],
          "description": "The target Platform. Is set programmatically explicitly during publishing."
        }
      },
      "required": [
        "account",
        "product",
        "provider"
      ],
      "additionalProperties": false,
      "description": "Keygen options. https://keygen.sh/ Define `KEYGEN_TOKEN` environment variable."
    },
    "SnapStoreOptions": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string",
          "const": "snapStore",
          "description": "The provider. Must be `snapStore`."
        },
        "publisherName": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "updaterCacheDirName": {
          "type": [
            "string",
            "null"
          ]
        },
        "publishAutoUpdate": {
          "type": "boolean",
          "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers). Thus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
          "default": true
        },
        "requestHeaders": {
          "$ref": "#/definitions/OutgoingHttpHeaders",
          "description": "Any custom request headers"
        },
        "timeout": {
          "type": [
            "number",
            "null"
          ],
          "description": "Request timeout in milliseconds. (Default is 2 minutes; O is ignored)",
          "default": 120000
        },
        "repo": {
          "type": "string",
          "description": "snapcraft repo name"
        },
        "channels": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "The list of channels the snap would be released.",
          "default": [
            "edge"
          ]
        }
      },
      "required": [
        "provider"
      ],
      "additionalProperties": false,
      "description": "[Snap Store](https://snapcraft.io/) options. To publish directly to Snapcraft, see <a href=\"https://snapcraft.io/docs/snapcraft-authentication\">Snapcraft authentication options</a> for local or CI/CD authentication options."
    },
    "BitbucketOptions": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string",
          "const": "bitbucket",
          "description": "The provider. Must be `bitbucket`."
        },
        "publisherName": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "updaterCacheDirName": {
          "type": [
            "string",
            "null"
          ]
        },
        "publishAutoUpdate": {
          "type": "boolean",
          "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers). Thus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
          "default": true
        },
        "requestHeaders": {
          "$ref": "#/definitions/OutgoingHttpHeaders",
          "description": "Any custom request headers"
        },
        "timeout": {
          "type": [
            "number",
            "null"
          ],
          "description": "Request timeout in milliseconds. (Default is 2 minutes; O is ignored)",
          "default": 120000
        },
        "owner": {
          "type": "string",
          "description": "Repository owner"
        },
        "token": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [app password](https://bitbucket.org/account/settings/app-passwords) to support auto-update from private bitbucket repositories."
        },
        "username": {
          "type": [
            "string",
            "null"
          ],
          "description": "The user name to support auto-update from private bitbucket repositories."
        },
        "slug": {
          "type": "string",
          "description": "Repository slug/name"
        },
        "channel": {
          "type": [
            "string",
            "null"
          ],
          "description": "The channel.",
          "default": "latest"
        }
      },
      "required": [
        "owner",
        "provider",
        "slug"
      ],
      "additionalProperties": false,
      "description": "Bitbucket options. https://bitbucket.org/ Define `BITBUCKET_TOKEN` environment variable.\n\nFor converting an app password to a usable token, you can utilize this ```typescript convertAppPassword(owner: string, appPassword: string) { const base64encodedData = Buffer.from(`${owner}:${appPassword.trim()}`).toString(\"base64\") return `Basic ${base64encodedData}` } ```"
    },
    "Nullish": {
      "anyOf": [
        {
          "type": "null"
        },
        {
          "not": {}
        }
      ]
    },
    "AsyncTaskManager": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "items": {}
        }
      },
      "required": [
        "tasks"
      ],
      "additionalProperties": false
    },
    "Arch": {
      "type": "number",
      "enum": [
        0,
        1,
        2,
        3,
        4
      ]
    },
    "CancellationToken": {
      "type": "object",
      "additionalProperties": false,
      "properties": {}
    },
    "Hook<AfterExtractContext,void>": {
      "$comment": "(contextOrPath: T) => Promise<V> | V",
      "type": "object",
      "properties": {
        "namedArgs": {
          "type": "object",
          "properties": {
            "contextOrPath": {
              "$ref": "#/definitions/AfterExtractContext"
            }
          },
          "required": [
            "contextOrPath"
          ],
          "additionalProperties": false
        }
      }
    },
    "AfterExtractContext": {
      "$ref": "#/definitions/PackContext"
    },
    "Hook<AfterPackContext,void>": {
      "$comment": "(contextOrPath: T) => Promise<V> | V",
      "type": "object",
      "properties": {
        "namedArgs": {
          "type": "object",
          "properties": {
            "contextOrPath": {
              "$ref": "#/definitions/AfterPackContext"
            }
          },
          "required": [
            "contextOrPath"
          ],
          "additionalProperties": false
        }
      }
    },
    "AfterPackContext": {
      "$ref": "#/definitions/PackContext"
    },
    "Hook<ArtifactBuildStarted,void>": {
      "$comment": "(contextOrPath: T) => Promise<V> | V",
      "type": "object",
      "properties": {
        "namedArgs": {
          "type": "object",
          "properties": {
            "contextOrPath": {
              "$ref": "#/definitions/ArtifactBuildStarted"
            }
          },
          "required": [
            "contextOrPath"
          ],
          "additionalProperties": false
        }
      }
    },
    "ArtifactBuildStarted": {
      "type": "object",
      "properties": {
        "targetPresentableName": {
          "type": "string"
        },
        "file": {
          "type": "string"
        },
        "arch": {
          "anyOf": [
            {
              "$ref": "#/definitions/Arch"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "targetPresentableName",
        "file",
        "arch"
      ],
      "additionalProperties": false
    },
    "Hook<ArtifactCreated,void>": {
      "$comment": "(contextOrPath: T) => Promise<V> | V",
      "type": "object",
      "properties": {
        "namedArgs": {
          "type": "object",
          "properties": {
            "contextOrPath": {
              "$ref": "#/definitions/ArtifactCreated"
            }
          },
          "required": [
            "contextOrPath"
          ],
          "additionalProperties": false
        }
      }
    },
    "ArtifactCreated": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string"
        },
        "fileContent": {
          "anyOf": [
            {
              "$ref": "#/definitions/global.Buffer"
            },
            {
              "type": "null"
            }
          ]
        },
        "arch": {
          "anyOf": [
            {
              "$ref": "#/definitions/Arch"
            },
            {
              "type": "null"
            }
          ]
        },
        "safeArtifactName": {
          "type": [
            "string",
            "null"
          ]
        },
        "timeout": {
          "type": [
            "number",
            "null"
          ]
        },
        "packager": {
          "$ref": "#/definitions/PlatformPackager%3Cany%3E"
        },
        "target": {
          "anyOf": [
            {
              "$ref": "#/definitions/Target"
            },
            {
              "type": "null"
            }
          ]
        },
        "updateInfo": {},
        "publishConfig": {
          "anyOf": [
            {
              "$ref": "#/definitions/PublishConfiguration"
            },
            {
              "type": "null"
            }
          ]
        },
        "isWriteUpdateInfo": {
          "type": "boolean"
        }
      },
      "required": [
        "arch",
        "file",
        "packager",
        "target"
      ],
      "additionalProperties": false
    },
    "global.Buffer": {
      "type": "object",
      "additionalProperties": {
        "type": "number"
      },
      "properties": {
        "BYTES_PER_ELEMENT": {
          "type": "number"
        },
        "buffer": {
          "type": "object",
          "properties": {
            "byteLength": {
              "type": "number"
            }
          },
          "required": [
            "byteLength"
          ],
          "additionalProperties": false
        },
        "byteLength": {
          "type": "number"
        },
        "byteOffset": {
          "type": "number"
        },
        "length": {
          "type": "number"
        }
      },
      "required": [
        "BYTES_PER_ELEMENT",
        "buffer",
        "byteLength",
        "byteOffset",
        "length"
      ]
    },
    "PublishConfiguration": {
      "type": "object",
      "properties": {
        "provider": {
          "$ref": "#/definitions/PublishProvider",
          "description": "The provider."
        },
        "publisherName": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "updaterCacheDirName": {
          "type": [
            "string",
            "null"
          ]
        },
        "publishAutoUpdate": {
          "type": "boolean",
          "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers). Thus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
          "default": true
        },
        "requestHeaders": {
          "$ref": "#/definitions/OutgoingHttpHeaders",
          "description": "Any custom request headers"
        },
        "timeout": {
          "type": [
            "number",
            "null"
          ],
          "description": "Request timeout in milliseconds. (Default is 2 minutes; O is ignored)",
          "default": 120000
        }
      },
      "required": [
        "provider"
      ],
      "additionalProperties": false
    },
    "PublishProvider": {
      "type": "string",
      "enum": [
        "github",
        "s3",
        "spaces",
        "generic",
        "custom",
        "snapStore",
        "keygen",
        "bitbucket"
      ]
    },
    "Hook<BuildResult,string[]>": {
      "$comment": "(contextOrPath: T) => Promise<V> | V",
      "type": "object",
      "properties": {
        "namedArgs": {
          "type": "object",
          "properties": {
            "contextOrPath": {
              "$ref": "#/definitions/BuildResult"
            }
          },
          "required": [
            "contextOrPath"
          ],
          "additionalProperties": false
        }
      }
    },
    "BuildResult": {
      "type": "object",
      "properties": {
        "outDir": {
          "type": "string"
        },
        "artifactPaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "platformToTargets": {
          "type": "object",
          "properties": {
            "size": {
              "type": "number"
            }
          },
          "required": [
            "size"
          ],
          "additionalProperties": false
        },
        "configuration": {
          "$ref": "#/definitions/Configuration"
        }
      },
      "required": [
        "outDir",
        "artifactPaths",
        "platformToTargets",
        "configuration"
      ],
      "additionalProperties": false
    },
    "Hook<string,void>": {
      "$comment": "(contextOrPath: T) => Promise<V> | V",
      "type": "object",
      "properties": {
        "namedArgs": {
          "type": "object",
          "properties": {
            "contextOrPath": {
              "type": "string"
            }
          },
          "required": [
            "contextOrPath"
          ],
          "additionalProperties": false
        }
      }
    },
    "Hook<string,(void|boolean)>": {
      "$comment": "(contextOrPath: T) => Promise<V> | V",
      "type": "object",
      "properties": {
        "namedArgs": {
          "type": "object",
          "properties": {
            "contextOrPath": {
              "type": "string"
            }
          },
          "required": [
            "contextOrPath"
          ],
          "additionalProperties": false
        }
      }
    },
    "Hook<BeforeBuildContext,(boolean|void)>": {
      "$comment": "(contextOrPath: T) => Promise<V> | V",
      "type": "object",
      "properties": {
        "namedArgs": {
          "type": "object",
          "properties": {
            "contextOrPath": {
              "$ref": "#/definitions/BeforeBuildContext"
            }
          },
          "required": [
            "contextOrPath"
          ],
          "additionalProperties": false
        }
      }
    },
    "BeforeBuildContext": {
      "type": "object",
      "properties": {
        "appDir": {
          "type": "string"
        },
        "electronVersion": {
          "type": "string"
        },
        "platform": {
          "$ref": "#/definitions/Platform"
        },
        "arch": {
          "type": "string"
        }
      },
      "required": [
        "appDir",
        "electronVersion",
        "platform",
        "arch"
      ],
      "additionalProperties": false
    },
    "Hook<PrepareApplicationStageDirectoryOptions,string>": {
      "$comment": "(contextOrPath: T) => Promise<V> | V",
      "type": "object",
      "properties": {
        "namedArgs": {
          "type": "object",
          "properties": {
            "contextOrPath": {
              "$ref": "#/definitions/PrepareApplicationStageDirectoryOptions"
            }
          },
          "required": [
            "contextOrPath"
          ],
          "additionalProperties": false
        }
      }
    },
    "PrepareApplicationStageDirectoryOptions": {
      "type": "object",
      "properties": {
        "packager": {
          "$ref": "#/definitions/PlatformPackager%3Cany%3E"
        },
        "appOutDir": {
          "type": "string",
          "description": "Platform doesn't process application output directory in any way. Unpack implementation must create or empty dir if need."
        },
        "platformName": {
          "$ref": "#/definitions/ElectronPlatformName"
        },
        "arch": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "packager",
        "appOutDir",
        "platformName",
        "arch",
        "version"
      ],
      "additionalProperties": false
    },
    "ElectronPlatformName": {
      "type": "string",
      "enum": [
        "darwin",
        "linux",
        "win32",
        "mas"
      ]
    },
    "FileSet": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "description": "The source path relative to and defaults to:\n\n - the [app directory](configuration.md#directories) for `files`,  - the project directory for `extraResources` and `extraFiles`. If you don't use two-package.json structure and don't set custom app directory, app directory equals to project directory."
        },
        "to": {
          "type": "string",
          "description": "The destination path relative to and defaults to:\n\n - the asar archive root for `files`,  - the app's content directory for `extraFiles`,  - the app's resource directory for `extraResources`."
        },
        "filter": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ],
          "description": "The [glob patterns](./file-patterns.md). Defaults to \"**\\/*\""
        }
      },
      "additionalProperties": false
    },
    "CompressionLevel": {
      "type": "string",
      "enum": [
        "store",
        "normal",
        "maximum"
      ]
    },
    "AsarOptions": {
      "type": "object",
      "properties": {
        "smartUnpack": {
          "type": "boolean",
          "description": "Whether to automatically unpack executables files.",
          "default": true
        },
        "ordering": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "FileAssociation": {
      "type": "object",
      "properties": {
        "ext": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "The extension (minus the leading period). e.g. `png`."
        },
        "name": {
          "type": [
            "string",
            "null"
          ],
          "description": "The name. e.g. `PNG`. Defaults to `ext`."
        },
        "description": {
          "type": [
            "string",
            "null"
          ],
          "description": "*windows-only.* The description."
        },
        "mimeType": {
          "type": [
            "string",
            "null"
          ],
          "description": "*linux-only.* The mime-type."
        },
        "icon": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to icon (`.icns` for MacOS and `.ico` for Windows), relative to `build` (build resources directory). Defaults to `${firstExt}.icns`/`${firstExt}.ico` (if several extensions specified, first is used) or to application icon.\n\nNot supported on Linux, file issue if need (default icon will be `x-office-document`). Not supported on MSI."
        },
        "role": {
          "type": "string",
          "description": "*macOS-only* The app’s role with respect to the type. The value can be `Editor`, `Viewer`, `Shell`, or `None`. Corresponds to `CFBundleTypeRole`.",
          "default": "Editor"
        },
        "isPackage": {
          "type": "boolean",
          "description": "*macOS-only* Whether the document is distributed as a bundle. If set to true, the bundle directory is treated as a file. Corresponds to `LSTypeIsPackage`."
        },
        "rank": {
          "type": "string",
          "description": "*macOS-only* The app’s rank with respect to the type. The value can be `Owner`, `Default`, `Alternate`, or `None`. Corresponds to `LSHandlerRank`.",
          "default": "Default"
        }
      },
      "required": [
        "ext"
      ],
      "additionalProperties": false,
      "description": "File associations.\n\nmacOS (corresponds to [CFBundleDocumentTypes](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-101685)), NSIS, and MSI only.\n\nOn Windows (NSIS) works only if [nsis.perMachine](https://www.electron.build/nsis) is set to `true`."
    },
    "Protocol": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name. e.g. `IRC server URL`."
        },
        "schemes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The schemes. e.g. `[\"irc\", \"ircs\"]`."
        },
        "role": {
          "type": "string",
          "enum": [
            "Editor",
            "Viewer",
            "Shell",
            "None"
          ],
          "description": "*macOS-only* The app’s role with respect to the type.",
          "default": "Editor"
        }
      },
      "required": [
        "name",
        "schemes"
      ],
      "additionalProperties": false,
      "description": "URL Protocol Schemes. Protocols to associate the app with. macOS only.\n\nPlease note — on macOS [you need to register an `open-url` event handler](http://electron.atom.io/docs/api/app/#event-open-url-macos)."
    },
    "ReleaseInfo": {
      "type": "object",
      "properties": {
        "releaseName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The release name."
        },
        "releaseNotes": {
          "type": [
            "string",
            "null"
          ],
          "description": "The release notes."
        },
        "releaseNotesFile": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to release notes file. Defaults to `release-notes-${platform}.md` (where `platform` it is current platform — `mac`, `linux` or `windows`) or `release-notes.md` in the [build resources](./contents.md#extraresources)."
        },
        "releaseDate": {
          "type": "string",
          "description": "The release date."
        },
        "vendor": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "description": "Vendor specific information."
        }
      },
      "additionalProperties": false
    },
    "TargetConfiguration": {
      "type": "object",
      "properties": {
        "target": {
          "type": "string",
          "description": "The target name. e.g. `snap`."
        },
        "arch": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ArchType"
              }
            },
            {
              "$ref": "#/definitions/ArchType"
            }
          ],
          "description": "The arch or list of archs."
        }
      },
      "required": [
        "target"
      ],
      "additionalProperties": false
    },
    "ArchType": {
      "type": "string",
      "enum": [
        "x64",
        "ia32",
        "armv7l",
        "arm64",
        "universal"
      ]
    },
    "MetadataDirectories": {
      "type": "object",
      "properties": {
        "buildResources": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to build resources.\n\nPlease note — build resources are not packed into the app. If you need to use some files, e.g. as tray icon, please include required files explicitly: `\"files\": [\"**\\/*\", \"build/icon.*\"]`",
          "default": "build"
        },
        "output": {
          "type": [
            "string",
            "null"
          ],
          "description": "The output directory. [File macros](./file-patterns.md#file-macros) are supported.",
          "default": "dist"
        },
        "app": {
          "type": [
            "string",
            "null"
          ],
          "description": "The application directory (containing the application package.json), defaults to `app`, `www` or working directory."
        }
      },
      "additionalProperties": false
    },
    "MacConfiguration": {
      "type": "object",
      "properties": {
        "files": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A [glob patterns](./file-patterns.md) relative to the [app directory](configuration.md#directories), which specifies which files to include when copying files to create the package.\n\nDefaults to: ```json [ \"**\\/*\", \"!**\\/node_modules/*\\/{CHANGELOG.md,README.md,README,readme.md,readme}\", \"!**\\/node_modules/*\\/{test,__tests__,tests,powered-test,example,examples}\", \"!**\\/node_modules/*.d.ts\", \"!**\\/node_modules/.bin\", \"!**\\/*.{iml,o,hprof,orig,pyc,pyo,rbc,swp,csproj,sln,xproj}\", \"!.editorconfig\", \"!**\\/._*\", \"!**\\/{.DS_Store,.git,.hg,.svn,CVS,RCS,SCCS,.gitignore,.gitattributes}\", \"!**\\/{__pycache__,thumbs.db,.flowconfig,.idea,.vs,.nyc_output}\", \"!**\\/{appveyor.yml,.travis.yml,circle.yml}\", \"!**\\/{npm-debug.log,yarn.lock,.yarn-integrity,.yarn-metadata.json}\" ] ```\n\nDevelopment dependencies are never copied in any case. You don't need to ignore it explicitly. Hidden files are not ignored by default, but all files that should be ignored, are ignored by default.\n\nDefault pattern \\`**\\/*\\` **is not added to your custom** if some of your patterns is not ignore (i.e. not starts with `!`). `package.json` and \\`**\\/node_modules/**\\/*` (only production dependencies will be copied) is added to your custom in any case. All default ignores are added in any case — you don't need to repeat it if you configure own patterns.\n\nMay be specified in the platform options (e.g. in the [mac](mac.md)).\n\nYou may also specify custom source and destination directories by using `FileSet` objects instead of simple glob patterns.\n\n```json [ { \"from\": \"path/to/source\", \"to\": \"path/to/destination\", \"filter\": [\"**\\/*\", \"!foo/*.js\"] } ] ```\n\nYou can use [file macros](./file-patterns.md#file-macros) in the `from` and `to` fields as well. `from` and `to` can be files and you can use this to [rename](https://github.com/electron-userland/electron-builder/issues/1119) a file while packaging."
        },
        "extraResources": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A [glob patterns](./file-patterns.md) relative to the project directory, when specified, copy the file or directory with matching names directly into the app's resources directory (`Contents/Resources` for MacOS, `resources` for Linux and Windows).\n\nFile patterns (and support for `from` and `to` fields) the same as for [files](#files)."
        },
        "extraFiles": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The same as [extraResources](#extraresources) but copy into the app's content directory (`Contents` for MacOS, root directory for Linux and Windows)."
        },
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options)."
        },
        "publish": {
          "$ref": "#/definitions/Publish",
          "description": "Publisher configuration. See [Auto Update](./publish.md) for more information."
        },
        "appId": {
          "type": [
            "string",
            "null"
          ],
          "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as [Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
          "default": "com.electron.${name}"
        },
        "executableName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The executable name. Defaults to `productName`."
        },
        "compression": {
          "anyOf": [
            {
              "$ref": "#/definitions/CompressionLevel"
            },
            {
              "type": "null"
            }
          ],
          "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
          "default": "normal"
        },
        "disableDefaultIgnoredFiles": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Whether to exclude all default ignored files(https://www.electron.build/contents#files) and options. Defaults to `false`.",
          "default": false
        },
        "asar": {
          "anyOf": [
            {
              "$ref": "#/definitions/AsarOptions"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#asarUnpack) - please file an issue if this doesn't work.",
          "default": true
        },
        "asarUnpack": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A [glob patterns](./file-patterns.md) relative to the [app directory](#directories), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive."
        },
        "icon": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to application icon.",
          "default": "build/icon.icns"
        },
        "fileAssociations": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileAssociation"
              }
            },
            {
              "$ref": "#/definitions/FileAssociation"
            }
          ],
          "description": "The file associations."
        },
        "protocols": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Protocol"
              }
            },
            {
              "$ref": "#/definitions/Protocol"
            }
          ],
          "description": "The URL protocol schemes."
        },
        "electronLanguages": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ],
          "description": "The electron locales to keep. By default, all Electron locales used as-is."
        },
        "forceCodeSigning": {
          "type": "boolean",
          "description": "Whether to fail if app will be not code signed."
        },
        "electronUpdaterCompatibility": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [electron-updater compatibility](./auto-update.md#compatibility) semver range."
        },
        "detectUpdateChannel": {
          "type": "boolean",
          "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`. This does *not* apply to github publishing, which will [never auto-detect the update channel](https://github.com/electron-userland/electron-builder/issues/8589).",
          "default": true
        },
        "generateUpdatesFilesForAllChannels": {
          "type": "boolean",
          "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
          "default": false
        },
        "releaseInfo": {
          "$ref": "#/definitions/ReleaseInfo",
          "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\" ```"
        },
        "target": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/MacOsTargetName"
                  },
                  {
                    "$ref": "#/definitions/TargetConfiguration"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/MacOsTargetName"
            },
            {
              "$ref": "#/definitions/TargetConfiguration"
            },
            {
              "type": "null"
            }
          ],
          "description": "The target package type: list of `default`, `dmg`, `mas`, `mas-dev`, `pkg`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `default` (`dmg` and `zip` for Squirrel.Mac). Note: Squirrel.Mac auto update mechanism requires both `dmg` and `zip` to be enabled, even when only `dmg` is used. Disabling `zip` will break auto update in `dmg` packages."
        },
        "cscLink": {
          "type": [
            "string",
            "null"
          ]
        },
        "cscKeyPassword": {
          "type": [
            "string",
            "null"
          ]
        },
        "defaultArch": {
          "type": "string"
        },
        "category": {
          "type": [
            "string",
            "null"
          ],
          "description": "The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\n\nFor example, `\"category\": \"public.app-category.developer-tools\"` will set the application category to *Developer Tools*.\n\nValid values are listed in [Apple's documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8)."
        },
        "identity": {
          "type": [
            "string",
            "null"
          ],
          "description": "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](./code-signing.md) instead of specifying this option. MAS installer identity is specified in the [mas](./mas.md).\n\nSet to `-` to use an ad-hoc identity for signing. Set to `null` to skip signing entirely."
        },
        "entitlements": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to entitlements file for signing the app. `build/entitlements.mac.plist` will be used if exists (it is a recommended way to set). MAS entitlements is specified in the [mas](./mas.md). See [this folder in osx-sign's repository](https://github.com/electron/osx-sign/tree/main/entitlements) for examples. Be aware that your app may crash if the right entitlements are not set like `com.apple.security.cs.allow-jit` for example on arm64 builds with Electron 20+. See [Signing and Notarizing macOS Builds from the Electron documentation](https://www.electronjs.org/docs/latest/tutorial/code-signing#signing--notarizing-macos-builds) for more information."
        },
        "entitlementsInherit": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mac.inherit.plist` will be used if exists (it is a recommended way to set). See [this folder in osx-sign's repository](https://github.com/electron/osx-sign/tree/main/entitlements) for examples.\n\nThis option only applies when signing with `entitlements` provided."
        },
        "entitlementsLoginHelper": {
          "type": [
            "string",
            "null"
          ],
          "description": "Path to login helper entitlement file. When using App Sandbox, the the `com.apple.security.inherit` key that is normally in the inherited entitlements cannot be inherited since the login helper is a standalone executable. Defaults to the value provided for `entitlements`. This option only applies when signing with `entitlements` provided."
        },
        "provisioningProfile": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to the provisioning profile to use when signing, absolute or relative to the app root."
        },
        "bundleVersion": {
          "type": [
            "string",
            "null"
          ],
          "description": "The `CFBundleVersion`. Do not use it unless [you need to](https://github.com/electron-userland/electron-builder/issues/565#issuecomment-230678643)."
        },
        "bundleShortVersion": {
          "type": [
            "string",
            "null"
          ],
          "description": "The `CFBundleShortVersionString`. Do not use it unless you need to."
        },
        "darkModeSupport": {
          "type": "boolean",
          "description": "Whether a dark mode is supported. If your app does have a dark mode, you can make your app follow the system-wide dark mode setting.",
          "default": false
        },
        "helperBundleId": {
          "type": [
            "string",
            "null"
          ],
          "description": "The bundle identifier to use in the application helper's plist.",
          "default": "${appBundleIdentifier}.helper"
        },
        "helperRendererBundleId": {
          "type": [
            "string",
            "null"
          ],
          "description": "The bundle identifier to use in the Renderer helper's plist.",
          "default": "${appBundleIdentifier}.helper.Renderer"
        },
        "helperPluginBundleId": {
          "type": [
            "string",
            "null"
          ],
          "description": "The bundle identifier to use in the Plugin helper's plist.",
          "default": "${appBundleIdentifier}.helper.Plugin"
        },
        "helperGPUBundleId": {
          "type": [
            "string",
            "null"
          ],
          "description": "The bundle identifier to use in the GPU helper's plist.",
          "default": "${appBundleIdentifier}.helper.GPU"
        },
        "helperEHBundleId": {
          "type": [
            "string",
            "null"
          ],
          "description": "The bundle identifier to use in the EH helper's plist.",
          "default": "${appBundleIdentifier}.helper.EH"
        },
        "helperNPBundleId": {
          "type": [
            "string",
            "null"
          ],
          "description": "The bundle identifier to use in the NP helper's plist.",
          "default": "${appBundleIdentifier}.helper.NP"
        },
        "type": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "distribution",
            "development",
            null
          ],
          "description": "Whether to sign app for development or for distribution.",
          "default": "distribution"
        },
        "extendInfo": {
          "description": "The extra entries for `Info.plist`."
        },
        "binaries": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "Paths of any extra binaries that need to be signed."
        },
        "minimumSystemVersion": {
          "type": [
            "string",
            "null"
          ],
          "description": "The minimum version of macOS required for the app to run. Corresponds to `LSMinimumSystemVersion`."
        },
        "requirements": {
          "type": [
            "string",
            "null"
          ],
          "description": "Path of [requirements file](https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html) used in signing. Not applicable for MAS."
        },
        "cscInstallerLink": {
          "type": [
            "string",
            "null"
          ]
        },
        "cscInstallerKeyPassword": {
          "type": [
            "string",
            "null"
          ]
        },
        "extraDistFiles": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Extra files to put in archive. Not applicable for `tar.*`."
        },
        "hardenedRuntime": {
          "type": "boolean",
          "description": "Whether your app has to be signed with hardened runtime.",
          "default": true
        },
        "gatekeeperAssess": {
          "type": "boolean",
          "description": "Whether to let `@electron/osx-sign` validate the signing or not.",
          "default": false
        },
        "strictVerify": {
          "type": "boolean",
          "description": "Whether to let `@electron/osx-sign` verify the contents or not.",
          "default": true
        },
        "preAutoEntitlements": {
          "type": "boolean",
          "description": "Whether to enable entitlements automation from `@electron/osx-sign`.",
          "default": true
        },
        "signIgnore": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Regex or an array of regex's that signal skipping signing a file."
        },
        "sign": {
          "anyOf": [
            {
              "$ref": "#/definitions/CustomMacSign"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The custom function (or path to file or module id) to sign an app bundle."
        },
        "timestamp": {
          "type": [
            "string",
            "null"
          ],
          "description": "Specify the URL of the timestamp authority server"
        },
        "mergeASARs": {
          "type": "boolean",
          "description": "Whether to merge ASAR files for different architectures or not.\n\nThis option has no effect unless building for \"universal\" arch.",
          "default": true
        },
        "singleArchFiles": {
          "type": [
            "string",
            "null"
          ],
          "description": "Minimatch pattern of paths that are allowed to be present in one of the ASAR files, but not in the other.\n\nThis option has no effect unless building for \"universal\" arch and applies only if `mergeASARs` is `true`."
        },
        "x64ArchFiles": {
          "type": [
            "string",
            "null"
          ],
          "description": "Minimatch pattern of paths that are allowed to be x64 binaries in both ASAR files\n\nThis option has no effect unless building for \"universal\" arch and applies only if `mergeASARs` is `true`."
        },
        "additionalArguments": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "Array of strings specifying additional arguments to pass to the `codesign` command used to sign a specific file.\n\nSome subresources that you may include in your Electron app may need to be signed with --deep, this is not typically safe to apply to the entire Electron app and therefore should be applied to just your file. Usage Example: `['--deep']`"
        },
        "notarize": {
          "type": "boolean",
          "description": "Whether to disable electron-builder's [@electron/notarize](https://github.com/electron/notarize) integration.\n\nNote: In order to activate the notarization step You MUST specify one of the following via environment variables:\n\n1. `APPLE_API_KEY`, `APPLE_API_KEY_ID` and `APPLE_API_ISSUER`. 2. `APPLE_ID`, `APPLE_APP_SPECIFIC_PASSWORD`, and `APPLE_TEAM_ID` 3. `APPLE_KEYCHAIN` and `APPLE_KEYCHAIN_PROFILE`\n\nFor security reasons it is recommended to use the first option (see https://github.com/electron-userland/electron-builder/issues/7859)"
        }
      },
      "additionalProperties": false
    },
    "MacOsTargetName": {
      "type": "string",
      "enum": [
        "default",
        "dmg",
        "mas",
        "mas-dev",
        "pkg",
        "7z",
        "zip",
        "tar.xz",
        "tar.lz",
        "tar.gz",
        "tar.bz2",
        "dir"
      ]
    },
    "CustomMacSign": {
      "$comment": "(configuration: CustomMacSignOptions, packager: MacPackager) => Promise<void>",
      "type": "object",
      "properties": {
        "namedArgs": {
          "type": "object",
          "properties": {
            "configuration": {
              "$ref": "#/definitions/CustomMacSignOptions"
            },
            "packager": {
              "$ref": "#/definitions/MacPackager"
            }
          },
          "required": [
            "configuration",
            "packager"
          ],
          "additionalProperties": false
        }
      }
    },
    "CustomMacSignOptions": {
      "$ref": "#/definitions/SignOptions"
    },
    "SignOptions": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "binaries": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of paths to additional binaries that will be signed along with built-ins of Electron."
        },
        "optionsForFile": {
          "$comment": "(filePath: string) => PerFileSignOptions",
          "type": "object",
          "properties": {
            "namedArgs": {
              "type": "object",
              "properties": {
                "filePath": {
                  "type": "string"
                }
              },
              "required": [
                "filePath"
              ],
              "additionalProperties": false
            }
          },
          "description": "Function that receives the path to a file and can return the entitlements to use for that file to override the default behavior. The object this function returns can include any of the following optional keys. Any properties that are returned **override** the default values that `@electron/osx-sign` generates. Any properties not returned use the default value."
        },
        "identityValidation": {
          "type": "boolean",
          "description": "Flag to enable/disable validation for the signing identity. If enabled, the  {@link  SignOptions.identity identity }  provided will be validated in the  {@link  BaseSignOptions.keychain keychain }  specified."
        },
        "ignore": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "$comment": "(file: string) => boolean",
              "type": "object",
              "properties": {
                "namedArgs": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "file"
                  ],
                  "additionalProperties": false
                }
              }
            }
          ],
          "description": "Defines files that will be skipped during the code signing process. This property accepts a regex, function or an array of regexes and functions. Elements of other types are treated as `RegExp`.\n\nFile paths matching a regex or returning a `true` value from a function will be ignored."
        },
        "preAutoEntitlements": {
          "type": "boolean",
          "description": "Flag to enable/disable entitlements automation tasks necessary for code signing most Electron apps.\n* Adds [`com.apple.security.application-groups`](https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_security_application-groups) to the entitlements file\n* Fills in the `ElectronTeamID` property in `Info.plist` with the provisioning profile's Team Identifier or by parsing the identity name."
        },
        "preEmbedProvisioningProfile": {
          "type": "boolean",
          "description": "Flag to enable/disable the embedding of a provisioning profile into the app's `Contents` folder. Will use the profile from  {@link  OnlySignOptions.provisioningProfile }  if provided. Otherwise, it searches for a `.provisionprofile` file in the current working directory."
        },
        "provisioningProfile": {
          "type": "string",
          "description": "Path to a provisioning profile, which can be used to grant restricted entitlements to your app.\n\nSee [Apple Documentation](https://developer.apple.com/documentation/technotes/tn3125-inside-code-signing-provisioning-profiles) for more details."
        },
        "strictVerify": {
          "type": [
            "boolean",
            "string"
          ],
          "description": "Flag to enable/disable the `--strict` flag when verifying the signed application bundle. Also supports string values to specify which strict restrictions to use, see codesign man page for supported values."
        },
        "type": {
          "$ref": "#/definitions/SigningDistributionType",
          "description": "Type of certificate to use when signing a MAS app."
        },
        "version": {
          "type": "string",
          "description": "Build version of Electron. Values may be like: `1.1.1`, `1.2.0`. For use for signing legacy versions of Electron to ensure backwards compatibility."
        },
        "app": {
          "type": "string",
          "description": "Path to the application package. Needs to end with the file extension `.app`."
        },
        "keychain": {
          "type": "string",
          "description": "The keychain name."
        },
        "platform": {
          "$ref": "#/definitions/ElectronMacPlatform",
          "description": "Build platform of your Electron app. Allowed values: `darwin` (Direct Download App), `mas` (Mac App Store)."
        },
        "identity": {
          "type": "string",
          "description": "Name of the certificate to use when signing."
        }
      },
      "required": [
        "app"
      ],
      "description": "Options for codesigning a packaged `.app` bundle."
    },
    "SigningDistributionType": {
      "type": "string",
      "enum": [
        "development",
        "distribution"
      ],
      "description": "MAS apps can be signed using Development or Distribution certificates.\n\nSee [Apple Documentation](https://developer.apple.com/help/account/create-certificates/certificates-overview/) for more info."
    },
    "ElectronMacPlatform": {
      "type": "string",
      "enum": [
        "darwin",
        "mas"
      ],
      "description": "macOS applications can be distributed via the Mac App Store (MAS) or directly downloaded from the developer's website."
    },
    "MacPackager": {
      "type": "object",
      "properties": {
        "platformSpecificBuildOptions": {
          "$ref": "#/definitions/MacConfiguration"
        },
        "appInfo": {
          "$ref": "#/definitions/AppInfo"
        },
        "info": {
          "$ref": "#/definitions/Packager"
        },
        "platform": {
          "$ref": "#/definitions/Platform"
        },
        "codeSigningInfo": {
          "$ref": "#/definitions/MemoLazy%3C(CreateKeychainOptions%7Cnull)%2CCodeSigningInfo%3E"
        }
      },
      "required": [
        "appInfo",
        "codeSigningInfo",
        "info",
        "platform",
        "platformSpecificBuildOptions"
      ],
      "additionalProperties": false
    },
    "MemoLazy<(CreateKeychainOptions|null),CodeSigningInfo>": {
      "type": "object",
      "additionalProperties": false
    },
    "MasConfiguration": {
      "type": "object",
      "properties": {
        "files": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A [glob patterns](./file-patterns.md) relative to the [app directory](configuration.md#directories), which specifies which files to include when copying files to create the package.\n\nDefaults to: ```json [ \"**\\/*\", \"!**\\/node_modules/*\\/{CHANGELOG.md,README.md,README,readme.md,readme}\", \"!**\\/node_modules/*\\/{test,__tests__,tests,powered-test,example,examples}\", \"!**\\/node_modules/*.d.ts\", \"!**\\/node_modules/.bin\", \"!**\\/*.{iml,o,hprof,orig,pyc,pyo,rbc,swp,csproj,sln,xproj}\", \"!.editorconfig\", \"!**\\/._*\", \"!**\\/{.DS_Store,.git,.hg,.svn,CVS,RCS,SCCS,.gitignore,.gitattributes}\", \"!**\\/{__pycache__,thumbs.db,.flowconfig,.idea,.vs,.nyc_output}\", \"!**\\/{appveyor.yml,.travis.yml,circle.yml}\", \"!**\\/{npm-debug.log,yarn.lock,.yarn-integrity,.yarn-metadata.json}\" ] ```\n\nDevelopment dependencies are never copied in any case. You don't need to ignore it explicitly. Hidden files are not ignored by default, but all files that should be ignored, are ignored by default.\n\nDefault pattern \\`**\\/*\\` **is not added to your custom** if some of your patterns is not ignore (i.e. not starts with `!`). `package.json` and \\`**\\/node_modules/**\\/*` (only production dependencies will be copied) is added to your custom in any case. All default ignores are added in any case — you don't need to repeat it if you configure own patterns.\n\nMay be specified in the platform options (e.g. in the [mac](mac.md)).\n\nYou may also specify custom source and destination directories by using `FileSet` objects instead of simple glob patterns.\n\n```json [ { \"from\": \"path/to/source\", \"to\": \"path/to/destination\", \"filter\": [\"**\\/*\", \"!foo/*.js\"] } ] ```\n\nYou can use [file macros](./file-patterns.md#file-macros) in the `from` and `to` fields as well. `from` and `to` can be files and you can use this to [rename](https://github.com/electron-userland/electron-builder/issues/1119) a file while packaging."
        },
        "extraResources": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A [glob patterns](./file-patterns.md) relative to the project directory, when specified, copy the file or directory with matching names directly into the app's resources directory (`Contents/Resources` for MacOS, `resources` for Linux and Windows).\n\nFile patterns (and support for `from` and `to` fields) the same as for [files](#files)."
        },
        "extraFiles": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The same as [extraResources](#extraresources) but copy into the app's content directory (`Contents` for MacOS, root directory for Linux and Windows)."
        },
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options)."
        },
        "publish": {
          "$ref": "#/definitions/Publish",
          "description": "Publisher configuration. See [Auto Update](./publish.md) for more information."
        },
        "appId": {
          "type": [
            "string",
            "null"
          ],
          "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as [Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
          "default": "com.electron.${name}"
        },
        "executableName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The executable name. Defaults to `productName`."
        },
        "compression": {
          "anyOf": [
            {
              "$ref": "#/definitions/CompressionLevel"
            },
            {
              "type": "null"
            }
          ],
          "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
          "default": "normal"
        },
        "disableDefaultIgnoredFiles": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Whether to exclude all default ignored files(https://www.electron.build/contents#files) and options. Defaults to `false`.",
          "default": false
        },
        "asar": {
          "anyOf": [
            {
              "$ref": "#/definitions/AsarOptions"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#asarUnpack) - please file an issue if this doesn't work.",
          "default": true
        },
        "asarUnpack": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A [glob patterns](./file-patterns.md) relative to the [app directory](#directories), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive."
        },
        "icon": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to application icon.",
          "default": "build/icon.icns"
        },
        "fileAssociations": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileAssociation"
              }
            },
            {
              "$ref": "#/definitions/FileAssociation"
            }
          ],
          "description": "The file associations."
        },
        "protocols": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Protocol"
              }
            },
            {
              "$ref": "#/definitions/Protocol"
            }
          ],
          "description": "The URL protocol schemes."
        },
        "electronLanguages": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ],
          "description": "The electron locales to keep. By default, all Electron locales used as-is."
        },
        "forceCodeSigning": {
          "type": "boolean",
          "description": "Whether to fail if app will be not code signed."
        },
        "electronUpdaterCompatibility": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [electron-updater compatibility](./auto-update.md#compatibility) semver range."
        },
        "detectUpdateChannel": {
          "type": "boolean",
          "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`. This does *not* apply to github publishing, which will [never auto-detect the update channel](https://github.com/electron-userland/electron-builder/issues/8589).",
          "default": true
        },
        "generateUpdatesFilesForAllChannels": {
          "type": "boolean",
          "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
          "default": false
        },
        "releaseInfo": {
          "$ref": "#/definitions/ReleaseInfo",
          "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\" ```"
        },
        "target": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/MacOsTargetName"
                  },
                  {
                    "$ref": "#/definitions/TargetConfiguration"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/MacOsTargetName"
            },
            {
              "$ref": "#/definitions/TargetConfiguration"
            },
            {
              "type": "null"
            }
          ],
          "description": "The target package type: list of `default`, `dmg`, `mas`, `mas-dev`, `pkg`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `default` (`dmg` and `zip` for Squirrel.Mac). Note: Squirrel.Mac auto update mechanism requires both `dmg` and `zip` to be enabled, even when only `dmg` is used. Disabling `zip` will break auto update in `dmg` packages."
        },
        "cscLink": {
          "type": [
            "string",
            "null"
          ]
        },
        "cscKeyPassword": {
          "type": [
            "string",
            "null"
          ]
        },
        "defaultArch": {
          "type": "string"
        },
        "category": {
          "type": [
            "string",
            "null"
          ],
          "description": "The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\n\nFor example, `\"category\": \"public.app-category.developer-tools\"` will set the application category to *Developer Tools*.\n\nValid values are listed in [Apple's documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8)."
        },
        "identity": {
          "type": [
            "string",
            "null"
          ],
          "description": "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](./code-signing.md) instead of specifying this option. MAS installer identity is specified in the [mas](./mas.md).\n\nSet to `-` to use an ad-hoc identity for signing. Set to `null` to skip signing entirely."
        },
        "entitlements": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to entitlements file for signing the app. `build/entitlements.mas.plist` will be used if exists (it is a recommended way to set). See [this folder in osx-sign's repository](https://github.com/electron/osx-sign/tree/main/entitlements) for examples. Be aware that your app may crash if the right entitlements are not set like `com.apple.security.cs.allow-jit` for example on arm64 builds with Electron 20+. See [Signing and Notarizing macOS Builds from the Electron documentation](https://www.electronjs.org/docs/latest/tutorial/code-signing#signing--notarizing-macos-builds) for more information."
        },
        "entitlementsInherit": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mas.inherit.plist` will be used if exists (it is a recommended way to set). See [this folder in osx-sign's repository](https://github.com/electron/osx-sign/tree/main/entitlements) for examples."
        },
        "entitlementsLoginHelper": {
          "type": [
            "string",
            "null"
          ],
          "description": "Path to login helper entitlement file. When using App Sandbox, the the `com.apple.security.inherit` key that is normally in the inherited entitlements cannot be inherited since the login helper is a standalone executable. Defaults to the value provided for `entitlements`. This option only applies when signing with `entitlements` provided."
        },
        "provisioningProfile": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to the provisioning profile to use when signing, absolute or relative to the app root."
        },
        "bundleVersion": {
          "type": [
            "string",
            "null"
          ],
          "description": "The `CFBundleVersion`. Do not use it unless [you need to](https://github.com/electron-userland/electron-builder/issues/565#issuecomment-230678643)."
        },
        "bundleShortVersion": {
          "type": [
            "string",
            "null"
          ],
          "description": "The `CFBundleShortVersionString`. Do not use it unless you need to."
        },
        "darkModeSupport": {
          "type": "boolean",
          "description": "Whether a dark mode is supported. If your app does have a dark mode, you can make your app follow the system-wide dark mode setting.",
          "default": false
        },
        "helperBundleId": {
          "type": [
            "string",
            "null"
          ],
          "description": "The bundle identifier to use in the application helper's plist.",
          "default": "${appBundleIdentifier}.helper"
        },
        "helperRendererBundleId": {
          "type": [
            "string",
            "null"
          ],
          "description": "The bundle identifier to use in the Renderer helper's plist.",
          "default": "${appBundleIdentifier}.helper.Renderer"
        },
        "helperPluginBundleId": {
          "type": [
            "string",
            "null"
          ],
          "description": "The bundle identifier to use in the Plugin helper's plist.",
          "default": "${appBundleIdentifier}.helper.Plugin"
        },
        "helperGPUBundleId": {
          "type": [
            "string",
            "null"
          ],
          "description": "The bundle identifier to use in the GPU helper's plist.",
          "default": "${appBundleIdentifier}.helper.GPU"
        },
        "helperEHBundleId": {
          "type": [
            "string",
            "null"
          ],
          "description": "The bundle identifier to use in the EH helper's plist.",
          "default": "${appBundleIdentifier}.helper.EH"
        },
        "helperNPBundleId": {
          "type": [
            "string",
            "null"
          ],
          "description": "The bundle identifier to use in the NP helper's plist.",
          "default": "${appBundleIdentifier}.helper.NP"
        },
        "type": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "distribution",
            "development",
            null
          ],
          "description": "Whether to sign app for development or for distribution.",
          "default": "distribution"
        },
        "extendInfo": {
          "description": "The extra entries for `Info.plist`."
        },
        "binaries": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "Paths of any extra binaries that need to be signed."
        },
        "minimumSystemVersion": {
          "type": [
            "string",
            "null"
          ],
          "description": "The minimum version of macOS required for the app to run. Corresponds to `LSMinimumSystemVersion`."
        },
        "requirements": {
          "type": [
            "string",
            "null"
          ],
          "description": "Path of [requirements file](https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html) used in signing. Not applicable for MAS."
        },
        "cscInstallerLink": {
          "type": [
            "string",
            "null"
          ]
        },
        "cscInstallerKeyPassword": {
          "type": [
            "string",
            "null"
          ]
        },
        "extraDistFiles": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Extra files to put in archive. Not applicable for `tar.*`."
        },
        "hardenedRuntime": {
          "type": "boolean",
          "description": "Whether your app has to be signed with hardened runtime.",
          "default": true
        },
        "gatekeeperAssess": {
          "type": "boolean",
          "description": "Whether to let `@electron/osx-sign` validate the signing or not.",
          "default": false
        },
        "strictVerify": {
          "type": "boolean",
          "description": "Whether to let `@electron/osx-sign` verify the contents or not.",
          "default": true
        },
        "preAutoEntitlements": {
          "type": "boolean",
          "description": "Whether to enable entitlements automation from `@electron/osx-sign`.",
          "default": true
        },
        "signIgnore": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Regex or an array of regex's that signal skipping signing a file."
        },
        "sign": {
          "anyOf": [
            {
              "$ref": "#/definitions/CustomMacSign"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The custom function (or path to file or module id) to sign an app bundle."
        },
        "timestamp": {
          "type": [
            "string",
            "null"
          ],
          "description": "Specify the URL of the timestamp authority server"
        },
        "mergeASARs": {
          "type": "boolean",
          "description": "Whether to merge ASAR files for different architectures or not.\n\nThis option has no effect unless building for \"universal\" arch.",
          "default": true
        },
        "singleArchFiles": {
          "type": [
            "string",
            "null"
          ],
          "description": "Minimatch pattern of paths that are allowed to be present in one of the ASAR files, but not in the other.\n\nThis option has no effect unless building for \"universal\" arch and applies only if `mergeASARs` is `true`."
        },
        "x64ArchFiles": {
          "type": [
            "string",
            "null"
          ],
          "description": "Minimatch pattern of paths that are allowed to be x64 binaries in both ASAR files\n\nThis option has no effect unless building for \"universal\" arch and applies only if `mergeASARs` is `true`."
        },
        "additionalArguments": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "Array of strings specifying additional arguments to pass to the `codesign` command used to sign a specific file.\n\nSome subresources that you may include in your Electron app may need to be signed with --deep, this is not typically safe to apply to the entire Electron app and therefore should be applied to just your file. Usage Example: `['--deep']`"
        },
        "notarize": {
          "type": "boolean",
          "description": "Whether to disable electron-builder's [@electron/notarize](https://github.com/electron/notarize) integration.\n\nNote: In order to activate the notarization step You MUST specify one of the following via environment variables:\n\n1. `APPLE_API_KEY`, `APPLE_API_KEY_ID` and `APPLE_API_ISSUER`. 2. `APPLE_ID`, `APPLE_APP_SPECIFIC_PASSWORD`, and `APPLE_TEAM_ID` 3. `APPLE_KEYCHAIN` and `APPLE_KEYCHAIN_PROFILE`\n\nFor security reasons it is recommended to use the first option (see https://github.com/electron-userland/electron-builder/issues/7859)"
        }
      },
      "additionalProperties": false
    },
    "DmgOptions": {
      "type": "object",
      "properties": {
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template)."
        },
        "publish": {
          "$ref": "#/definitions/Publish"
        },
        "background": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to background image (default: `build/background.tiff` or `build/background.png` if exists). The resolution of this file determines the resolution of the installer window. If background is not specified, use `window.size`. Default locations expected background size to be 540x380."
        },
        "backgroundColor": {
          "type": [
            "string",
            "null"
          ],
          "description": "The background color (accepts css colors). Defaults to `#ffffff` (white) if no background image."
        },
        "icon": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to DMG icon (volume icon), which will be shown when mounted, relative to the [build resources](./contents.md#extraresources) or to the project directory. Defaults to the application icon (`build/icon.icns`)."
        },
        "iconSize": {
          "type": [
            "number",
            "null"
          ],
          "description": "The size of all the icons inside the DMG.",
          "default": 80
        },
        "iconTextSize": {
          "type": [
            "number",
            "null"
          ],
          "description": "The size of all the icon texts inside the DMG.",
          "default": 12
        },
        "title": {
          "type": [
            "string",
            "null"
          ],
          "description": "The title of the produced DMG, which will be shown when mounted (volume name).\n\nMacro `${productName}`, `${version}` and `${name}` are supported.",
          "default": "${productName} ${version}"
        },
        "contents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DmgContent"
          },
          "description": "The content — to customize icon locations. The x and y coordinates refer to the position of the **center** of the icon (at 1x scale), and do not take the label into account."
        },
        "format": {
          "type": "string",
          "enum": [
            "UDRW",
            "UDRO",
            "UDCO",
            "UDZO",
            "UDBZ",
            "ULFO"
          ],
          "description": "The disk image format. `ULFO` (lzfse-compressed image (OS X 10.11+ only)).",
          "default": "UDZO"
        },
        "window": {
          "$ref": "#/definitions/DmgWindow",
          "description": "The DMG window position and size. With y co-ordinates running from bottom to top.\n\nThe Finder makes sure that the window will be on the user’s display, so if you want your window at the top left of the display you could use `\"x\": 0, \"y\": 100000` as the x, y co-ordinates. It is not to be possible to position the window relative to the [top left](https://github.com/electron-userland/electron-builder/issues/3990#issuecomment-512960957) or relative to the center of the user’s screen."
        },
        "internetEnabled": {
          "type": "boolean",
          "description": "Whether to create internet-enabled disk image (when it is downloaded using a browser it will automatically decompress the image, put the application on the desktop, unmount and remove the disk image file).",
          "default": false
        },
        "sign": {
          "type": "boolean",
          "description": "Whether to sign the DMG or not. Signing is not required and will lead to unwanted errors in combination with notarization requirements.",
          "default": false
        },
        "writeUpdateInfo": {
          "type": "boolean",
          "default": true
        }
      },
      "additionalProperties": false
    },
    "DmgContent": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "description": "The device-independent pixel offset from the left of the window to the **center** of the icon."
        },
        "y": {
          "type": "number",
          "description": "The device-independent pixel offset from the top of the window to the **center** of the icon."
        },
        "type": {
          "type": "string",
          "enum": [
            "link",
            "file",
            "dir"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the file within the DMG. Defaults to basename of `path`."
        },
        "path": {
          "type": "string",
          "description": "The path of the file within the DMG."
        }
      },
      "required": [
        "x",
        "y"
      ],
      "additionalProperties": false
    },
    "DmgWindow": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "description": "The X position relative to left of the screen.",
          "default": 400
        },
        "y": {
          "type": "number",
          "description": "The Y position relative to bottom of the screen.",
          "default": 100
        },
        "width": {
          "type": "number",
          "description": "The width. Defaults to background image width or 540."
        },
        "height": {
          "type": "number",
          "description": "The height. Defaults to background image height or 380."
        }
      },
      "additionalProperties": false
    },
    "PkgOptions": {
      "type": "object",
      "properties": {
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template)."
        },
        "publish": {
          "$ref": "#/definitions/Publish"
        },
        "scripts": {
          "type": [
            "string",
            "null"
          ],
          "description": "The scripts directory, relative to `build` (build resources directory). The scripts can be in any language so long as the files are marked executable and have the appropriate shebang indicating the path to the interpreter. Scripts are required to be executable (`chmod +x file`).",
          "default": "build/pkg-scripts"
        },
        "productbuild": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "should be not documented, only to experiment"
        },
        "installLocation": {
          "type": [
            "string",
            "null"
          ],
          "description": "The install location. [Do not use it](https://stackoverflow.com/questions/12863944/how-do-you-specify-a-default-install-location-to-home-with-pkgbuild) to create per-user package. Mostly never you will need to change this option. `/Applications` would install it as expected into `/Applications` if the local system domain is chosen, or into `$HOME/Applications` if the home installation is chosen.",
          "default": "/Applications"
        },
        "allowAnywhere": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Whether can be installed at the root of any volume, including non-system volumes. Otherwise, it cannot be installed at the root of a volume.\n\nCorresponds to [enable_anywhere](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
          "default": true
        },
        "allowCurrentUserHome": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Whether can be installed into the current user’s home directory. A home directory installation is done as the current user (not as root), and it cannot write outside of the home directory. If the product cannot be installed in the user’s home directory and be not completely functional from user’s home directory.\n\nCorresponds to [enable_currentUserHome](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
          "default": true
        },
        "allowRootDirectory": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Whether can be installed into the root directory. Should usually be `true` unless the product can be installed only to the user’s home directory.\n\nCorresponds to [enable_localSystem](https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW70).",
          "default": true
        },
        "identity": {
          "type": [
            "string",
            "null"
          ],
          "description": "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](./code-signing.md) instead of specifying this option."
        },
        "license": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt`, `rtf` and `html` supported (don't forget to use `target=\"_blank\"` for links)."
        },
        "background": {
          "anyOf": [
            {
              "$ref": "#/definitions/PkgBackgroundOptions"
            },
            {
              "type": "null"
            }
          ],
          "description": "Options for the background image for the installer."
        },
        "welcome": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to the welcome file. This may be used to customize the text on the Introduction page of the installer."
        },
        "mustClose": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "Identifies applications that must be closed before the package is installed.\n\nCorresponds to [must-close](https://developer.apple.com/library/archive/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html#//apple_ref/doc/uid/TP40005370-CH100-SW77)."
        },
        "conclusion": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to the conclusion file. This may be used to customize the text on the final \"Summary\" page of the installer."
        },
        "isRelocatable": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Install bundle over previous version if moved by user?",
          "default": true
        },
        "isVersionChecked": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Don't install bundle if newer version on disk?",
          "default": true
        },
        "hasStrictIdentifier": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Require identical bundle identifiers at install path?",
          "default": true
        },
        "overwriteAction": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "upgrade",
            "update",
            null
          ],
          "description": "Specifies how an existing version of the bundle on disk should be handled when the version in the package is installed.\n\nIf you specify upgrade, the bundle in the package atomi-cally replaces any version on disk; this has the effect of deleting old paths that no longer exist in the new version of the bundle.\n\nIf you specify update, the bundle in the package overwrites the version on disk, and any files not contained in the package will be left intact; this is appropriate when you are delivering an update-only package.\n\nAnother effect of update is that the package bundle will not be installed at all if there is not already a version on disk; this allows a package to deliver an update for an app that the user might have deleted.",
          "default": "upgrade"
        },
        "extraPkgsDir": {
          "type": [
            "string",
            "null"
          ],
          "description": "The extra component packages directory (relative to build resources directory) for MacOS product archive Autoscans directory for any `.pkg` files and adds to `productbuild` command as `--package-path` and `--package` accordingly"
        }
      },
      "additionalProperties": false,
      "description": "macOS product archive options."
    },
    "PkgBackgroundOptions": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string",
          "description": "Path to the image to use as an installer background."
        },
        "alignment": {
          "anyOf": [
            {
              "$ref": "#/definitions/BackgroundAlignment"
            },
            {
              "type": "null"
            }
          ],
          "description": "Alignment of the background image. Options are: center, left, right, top, bottom, topleft, topright, bottomleft, bottomright",
          "default": "center"
        },
        "scaling": {
          "anyOf": [
            {
              "$ref": "#/definitions/BackgroundScaling"
            },
            {
              "type": "null"
            }
          ],
          "description": "Scaling of the background image. Options are: tofit, none, proportional",
          "default": "tofit"
        }
      },
      "additionalProperties": false,
      "description": "Options for the background image in a PKG installer"
    },
    "BackgroundAlignment": {
      "type": "string",
      "enum": [
        "center",
        "left",
        "right",
        "top",
        "bottom",
        "topleft",
        "topright",
        "bottomleft",
        "bottomright"
      ]
    },
    "BackgroundScaling": {
      "type": "string",
      "enum": [
        "tofit",
        "none",
        "proportional"
      ]
    },
    "WindowsConfiguration": {
      "type": "object",
      "properties": {
        "files": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A [glob patterns](./file-patterns.md) relative to the [app directory](configuration.md#directories), which specifies which files to include when copying files to create the package.\n\nDefaults to: ```json [ \"**\\/*\", \"!**\\/node_modules/*\\/{CHANGELOG.md,README.md,README,readme.md,readme}\", \"!**\\/node_modules/*\\/{test,__tests__,tests,powered-test,example,examples}\", \"!**\\/node_modules/*.d.ts\", \"!**\\/node_modules/.bin\", \"!**\\/*.{iml,o,hprof,orig,pyc,pyo,rbc,swp,csproj,sln,xproj}\", \"!.editorconfig\", \"!**\\/._*\", \"!**\\/{.DS_Store,.git,.hg,.svn,CVS,RCS,SCCS,.gitignore,.gitattributes}\", \"!**\\/{__pycache__,thumbs.db,.flowconfig,.idea,.vs,.nyc_output}\", \"!**\\/{appveyor.yml,.travis.yml,circle.yml}\", \"!**\\/{npm-debug.log,yarn.lock,.yarn-integrity,.yarn-metadata.json}\" ] ```\n\nDevelopment dependencies are never copied in any case. You don't need to ignore it explicitly. Hidden files are not ignored by default, but all files that should be ignored, are ignored by default.\n\nDefault pattern \\`**\\/*\\` **is not added to your custom** if some of your patterns is not ignore (i.e. not starts with `!`). `package.json` and \\`**\\/node_modules/**\\/*` (only production dependencies will be copied) is added to your custom in any case. All default ignores are added in any case — you don't need to repeat it if you configure own patterns.\n\nMay be specified in the platform options (e.g. in the [mac](mac.md)).\n\nYou may also specify custom source and destination directories by using `FileSet` objects instead of simple glob patterns.\n\n```json [ { \"from\": \"path/to/source\", \"to\": \"path/to/destination\", \"filter\": [\"**\\/*\", \"!foo/*.js\"] } ] ```\n\nYou can use [file macros](./file-patterns.md#file-macros) in the `from` and `to` fields as well. `from` and `to` can be files and you can use this to [rename](https://github.com/electron-userland/electron-builder/issues/1119) a file while packaging."
        },
        "extraResources": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A [glob patterns](./file-patterns.md) relative to the project directory, when specified, copy the file or directory with matching names directly into the app's resources directory (`Contents/Resources` for MacOS, `resources` for Linux and Windows).\n\nFile patterns (and support for `from` and `to` fields) the same as for [files](#files)."
        },
        "extraFiles": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The same as [extraResources](#extraresources) but copy into the app's content directory (`Contents` for MacOS, root directory for Linux and Windows)."
        },
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options)."
        },
        "publish": {
          "$ref": "#/definitions/Publish",
          "description": "Publisher configuration. See [Auto Update](./publish.md) for more information."
        },
        "appId": {
          "type": [
            "string",
            "null"
          ],
          "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as [Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
          "default": "com.electron.${name}"
        },
        "executableName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The executable name. Defaults to `productName`."
        },
        "compression": {
          "anyOf": [
            {
              "$ref": "#/definitions/CompressionLevel"
            },
            {
              "type": "null"
            }
          ],
          "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
          "default": "normal"
        },
        "disableDefaultIgnoredFiles": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Whether to exclude all default ignored files(https://www.electron.build/contents#files) and options. Defaults to `false`.",
          "default": false
        },
        "asar": {
          "anyOf": [
            {
              "$ref": "#/definitions/AsarOptions"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#asarUnpack) - please file an issue if this doesn't work.",
          "default": true
        },
        "asarUnpack": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A [glob patterns](./file-patterns.md) relative to the [app directory](#directories), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive."
        },
        "icon": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to application icon.",
          "default": "build/icon.ico"
        },
        "fileAssociations": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileAssociation"
              }
            },
            {
              "$ref": "#/definitions/FileAssociation"
            }
          ],
          "description": "The file associations."
        },
        "protocols": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Protocol"
              }
            },
            {
              "$ref": "#/definitions/Protocol"
            }
          ],
          "description": "The URL protocol schemes."
        },
        "electronLanguages": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ],
          "description": "The electron locales to keep. By default, all Electron locales used as-is."
        },
        "forceCodeSigning": {
          "type": "boolean",
          "description": "Whether to fail if app will be not code signed."
        },
        "electronUpdaterCompatibility": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [electron-updater compatibility](./auto-update.md#compatibility) semver range."
        },
        "detectUpdateChannel": {
          "type": "boolean",
          "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`. This does *not* apply to github publishing, which will [never auto-detect the update channel](https://github.com/electron-userland/electron-builder/issues/8589).",
          "default": true
        },
        "generateUpdatesFilesForAllChannels": {
          "type": "boolean",
          "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
          "default": false
        },
        "releaseInfo": {
          "$ref": "#/definitions/ReleaseInfo",
          "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\" ```"
        },
        "target": {
          "$ref": "#/definitions/TargetConfigType",
          "description": "The target package type: list of `nsis`, `nsis-web` (Web installer), `portable` ([portable]./nsis.md#portable) app without installation), `appx`, `msi`, `msi-wrapped`, `squirrel`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. AppX package can be built only on Windows 10.\n\nTo use Squirrel.Windows please install `electron-builder-squirrel-windows` dependency.",
          "default": "nsis"
        },
        "cscLink": {
          "type": [
            "string",
            "null"
          ]
        },
        "cscKeyPassword": {
          "type": [
            "string",
            "null"
          ]
        },
        "defaultArch": {
          "type": "string"
        },
        "legalTrademarks": {
          "type": [
            "string",
            "null"
          ],
          "description": "The trademarks and registered trademarks."
        },
        "signtoolOptions": {
          "anyOf": [
            {
              "$ref": "#/definitions/WindowsSigntoolConfiguration"
            },
            {
              "type": "null"
            }
          ],
          "description": "Options for usage with signtool.exe Cannot be used in conjunction with `azureSignOptions`, signing will default to Azure Trusted Signing"
        },
        "azureSignOptions": {
          "anyOf": [
            {
              "$ref": "#/definitions/WindowsAzureSigningConfiguration"
            },
            {
              "type": "null"
            }
          ],
          "description": "Options for usage of Azure Trusted Signing (beta) Cannot be used in conjunction with `signtoolOptions`, signing will default to Azure Trusted Signing"
        },
        "verifyUpdateCodeSignature": {
          "type": "boolean",
          "description": "Whether to verify the signature of an available update before installation. The [publisher name](#publisherName) will be used for the signature verification.",
          "default": true
        },
        "requestedExecutionLevel": {
          "anyOf": [
            {
              "$ref": "#/definitions/RequestedExecutionLevel"
            },
            {
              "type": "null"
            }
          ],
          "description": "The [security level](https://msdn.microsoft.com/en-us/library/6ad1fshk.aspx#Anchor_9) at which the application requests to be executed. Cannot be specified per target, allowed only in the `win`.",
          "default": "asInvoker"
        },
        "signAndEditExecutable": {
          "type": "boolean",
          "description": "Whether to sign and add metadata to executable. Advanced option.",
          "default": true
        },
        "signExts": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "Explicit file extensions to also sign. Advanced option.",
          "default": null
        }
      },
      "additionalProperties": false
    },
    "TargetConfigType": {
      "anyOf": [
        {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/TargetConfiguration"
              }
            ]
          }
        },
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/TargetConfiguration"
        },
        {
          "type": "null"
        }
      ]
    },
    "WindowsSigntoolConfiguration": {
      "type": "object",
      "properties": {
        "sign": {
          "anyOf": [
            {
              "$ref": "#/definitions/CustomWindowsSign"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The custom function (or path to file or module id) to sign Windows executables"
        },
        "signingHashAlgorithms": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sha1",
                  "sha256"
                ]
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "Array of signing algorithms used. For AppX `sha256` is always used.",
          "default": [
            "sha1",
            "sha256"
          ]
        },
        "certificateFile": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to the *.pfx certificate you want to sign with. Please use it only if you cannot use env variable `CSC_LINK` (`WIN_CSC_LINK`) for some reason. Please see [Code Signing](./code-signing.md)."
        },
        "certificatePassword": {
          "type": [
            "string",
            "null"
          ],
          "description": "The password to the certificate provided in `certificateFile`. Please use it only if you cannot use env variable `CSC_KEY_PASSWORD` (`WIN_CSC_KEY_PASSWORD`) for some reason. Please see [Code Signing](./code-signing.md)."
        },
        "certificateSubjectName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The name of the subject of the signing certificate, which is often labeled with the field name `issued to`. Required only for EV Code Signing and works only on Windows (or on macOS if [Parallels Desktop](https://www.parallels.com/products/desktop/) Windows 10 virtual machines exits)."
        },
        "certificateSha1": {
          "type": [
            "string",
            "null"
          ],
          "description": "The SHA1 hash of the signing certificate. The SHA1 hash is commonly specified when multiple certificates satisfy the criteria specified by the remaining switches. Works only on Windows (or on macOS if [Parallels Desktop](https://www.parallels.com/products/desktop/) Windows 10 virtual machines exits)."
        },
        "additionalCertificateFile": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to an additional certificate file you want to add to the signature block."
        },
        "rfc3161TimeStampServer": {
          "type": [
            "string",
            "null"
          ],
          "description": "The URL of the RFC 3161 time stamp server.",
          "default": "http://timestamp.digicert.com"
        },
        "timeStampServer": {
          "type": [
            "string",
            "null"
          ],
          "description": "The URL of the time stamp server.",
          "default": "http://timestamp.digicert.com"
        },
        "publisherName": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "[The publisher name](https://github.com/electron-userland/electron-builder/issues/1187#issuecomment-278972073), exactly as in your code signed certificate. Several names can be provided. Defaults to common name from your code signing certificate."
        }
      },
      "additionalProperties": false
    },
    "CustomWindowsSign": {
      "$comment": "(configuration: CustomWindowsSignTaskConfiguration, packager?: WinPackager) => Promise<any>",
      "type": "object",
      "properties": {
        "namedArgs": {
          "type": "object",
          "properties": {
            "configuration": {
              "$ref": "#/definitions/CustomWindowsSignTaskConfiguration"
            },
            "packager": {
              "$ref": "#/definitions/WinPackager"
            }
          },
          "required": [
            "configuration"
          ],
          "additionalProperties": false
        }
      }
    },
    "CustomWindowsSignTaskConfiguration": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "path": {
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/WindowsConfiguration"
        },
        "name": {
          "type": "string"
        },
        "site": {
          "type": [
            "string",
            "null"
          ]
        },
        "cscInfo": {
          "anyOf": [
            {
              "$ref": "#/definitions/FileCodeSigningInfo"
            },
            {
              "$ref": "#/definitions/CertificateFromStoreInfo"
            },
            {
              "type": "null"
            }
          ]
        },
        "resultOutputPath": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "isNest": {
          "type": "boolean"
        }
      },
      "required": [
        "cscInfo",
        "hash",
        "isNest",
        "name",
        "options",
        "path",
        "site"
      ]
    },
    "FileCodeSigningInfo": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string"
        },
        "password": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "file",
        "password"
      ],
      "additionalProperties": false
    },
    "CertificateFromStoreInfo": {
      "type": "object",
      "properties": {
        "thumbprint": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "store": {
          "type": "string"
        },
        "isLocalMachineStore": {
          "type": "boolean"
        }
      },
      "required": [
        "thumbprint",
        "subject",
        "store",
        "isLocalMachineStore"
      ],
      "additionalProperties": false
    },
    "WinPackager": {
      "type": "object",
      "properties": {
        "platformSpecificBuildOptions": {
          "$ref": "#/definitions/WindowsConfiguration"
        },
        "appInfo": {
          "$ref": "#/definitions/AppInfo"
        },
        "info": {
          "$ref": "#/definitions/Packager"
        },
        "platform": {
          "$ref": "#/definitions/Platform"
        },
        "vm": {
          "$ref": "#/definitions/Lazy%3CVmManager%3E"
        },
        "signingManager": {
          "$ref": "#/definitions/Lazy%3CSignManager%3E"
        }
      },
      "required": [
        "appInfo",
        "info",
        "platform",
        "platformSpecificBuildOptions",
        "signingManager",
        "vm"
      ],
      "additionalProperties": false
    },
    "Lazy<VmManager>": {
      "type": "object",
      "properties": {
        "hasValue": {
          "type": "boolean"
        },
        "value": {
          "description": "Failed to correctly infer type"
        }
      },
      "required": [
        "hasValue",
        "value"
      ],
      "additionalProperties": false
    },
    "Lazy<SignManager>": {
      "type": "object",
      "properties": {
        "hasValue": {
          "type": "boolean"
        },
        "value": {
          "description": "Failed to correctly infer type"
        }
      },
      "required": [
        "hasValue",
        "value"
      ],
      "additionalProperties": false
    },
    "WindowsAzureSigningConfiguration": {
      "type": "object",
      "properties": {
        "publisherName": {
          "type": "string",
          "description": "[The publisher name](https://github.com/electron-userland/electron-builder/issues/1187#issuecomment-278972073), exactly as in your code signed certificate. Several names can be provided."
        },
        "endpoint": {
          "type": "string",
          "description": "The Trusted Signing Account endpoint. The URI value must have a URI that aligns to the region your Trusted Signing Account and Certificate Profile you are specifying were created in during the setup of these resources.\n\nTranslates to field: Endpoint\n\nRequires one of environment variable configurations for authenticating to Microsoft Entra ID per [Microsoft's documentation](https://learn.microsoft.com/en-us/dotnet/api/azure.identity.environmentcredential?view=azure-dotnet#definition)"
        },
        "certificateProfileName": {
          "type": "string",
          "description": "The Certificate Profile name. Translates to field: CertificateProfileName"
        },
        "codeSigningAccountName": {
          "type": "string",
          "description": "The Code Signing Signing Account name. Translates to field: CodeSigningAccountName"
        },
        "fileDigest": {
          "type": "string",
          "description": "The File Digest for signing each file. Translates to field: FileDigest",
          "default": "SHA256"
        },
        "timestampRfc3161": {
          "type": "string",
          "description": "The Timestamp rfc3161 server. Translates to field: TimestampRfc3161",
          "default": "http://timestamp.acs.microsoft.com"
        },
        "timestampDigest": {
          "type": "string",
          "description": "The Timestamp Digest. Translates to field: TimestampDigest",
          "default": "SHA256"
        }
      },
      "required": [
        "publisherName",
        "endpoint",
        "certificateProfileName",
        "codeSigningAccountName"
      ],
      "additionalProperties": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "$ref": "#/definitions/Nullish"
          }
        ],
        "description": "Allow other CLI parameters (verbatim case-sensitive) to `Invoke-TrustedSigning` Note: Key-Value pairs with `undefined`/`null` value are filtered out of the command."
      }
    },
    "RequestedExecutionLevel": {
      "type": "string",
      "enum": [
        "asInvoker",
        "highestAvailable",
        "requireAdministrator"
      ]
    },
    "NsisOptions": {
      "type": "object",
      "properties": {
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template). Defaults to `${productName} Setup ${version}.${ext}`."
        },
        "publish": {
          "$ref": "#/definitions/Publish"
        },
        "oneClick": {
          "type": "boolean",
          "description": "Whether to create one-click installer or assisted.",
          "default": true
        },
        "perMachine": {
          "type": "boolean",
          "description": "Whether to show install mode installer page (choice per-machine or per-user) for assisted installer. Or whether installation always per all users (per-machine).\n\nIf `oneClick` is `true` (default): Whether to install per all users (per-machine).\n\nIf `oneClick` is `false` and `perMachine` is `true`: no install mode installer page, always install per-machine.\n\nIf `oneClick` is `false` and `perMachine` is `false` (default): install mode installer page.",
          "default": false
        },
        "runAfterFinish": {
          "type": "boolean",
          "description": "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
          "default": true
        },
        "createDesktopShortcut": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "const": "always"
            }
          ],
          "description": "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
          "default": true
        },
        "createStartMenuShortcut": {
          "type": "boolean",
          "description": "Whether to create start menu shortcut.",
          "default": true
        },
        "menuCategory": {
          "type": [
            "boolean",
            "string"
          ],
          "description": "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
          "default": false
        },
        "shortcutName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The name that will be used for all shortcuts. Defaults to the application name."
        },
        "unicode": {
          "type": "boolean",
          "description": "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
          "default": true
        },
        "guid": {
          "type": [
            "string",
            "null"
          ],
          "description": "See [GUID vs Application Name](./nsis.md#guid-vs-application-name)."
        },
        "warningsAsErrors": {
          "type": "boolean",
          "description": "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
          "default": true
        },
        "useZip": {
          "type": "boolean",
          "default": false
        },
        "customNsisBinary": {
          "anyOf": [
            {
              "$ref": "#/definitions/CustomNsisBinary"
            },
            {
              "type": "null"
            }
          ],
          "description": "Allows you to provide your own `makensis`, such as one with support for debug logging via LogSet and LogText. (Logging also requires option `debugLogging = true`)"
        },
        "customNsisResources": {
          "anyOf": [
            {
              "$ref": "#/definitions/CustomNsisResources"
            },
            {
              "type": "null"
            }
          ],
          "description": "Allows you to provide your own `nsis-resources`"
        },
        "selectPerMachineByDefault": {
          "type": "boolean",
          "description": "Whether to set per-machine or per-user installation as default selection on the install mode installer page.",
          "default": false
        },
        "allowElevation": {
          "type": "boolean",
          "description": "*assisted installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.",
          "default": true
        },
        "allowToChangeInstallationDirectory": {
          "type": "boolean",
          "description": "*assisted installer only.* Whether to allow user to change installation directory.",
          "default": false
        },
        "removeDefaultUninstallWelcomePage": {
          "type": "boolean",
          "description": "*assisted installer only.* remove the default uninstall welcome page.",
          "default": false
        },
        "installerIcon": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to installer icon, relative to the [build resources](./contents.md#extraresources) or to the project directory. Defaults to `build/installerIcon.ico` or application icon."
        },
        "uninstallerIcon": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to uninstaller icon, relative to the [build resources](./contents.md#extraresources) or to the project directory. Defaults to `build/uninstallerIcon.ico` or application icon."
        },
        "installerHeader": {
          "type": [
            "string",
            "null"
          ],
          "description": "*assisted installer only.* `MUI_HEADERIMAGE`, relative to the [build resources](./contents.md#extraresources) or to the project directory.",
          "default": "build/installerHeader.bmp"
        },
        "installerHeaderIcon": {
          "type": [
            "string",
            "null"
          ],
          "description": "*one-click installer only.* The path to header icon (above the progress bar), relative to the [build resources](./contents.md#extraresources) or to the project directory. Defaults to `build/installerHeaderIcon.ico` or application icon."
        },
        "installerSidebar": {
          "type": [
            "string",
            "null"
          ],
          "description": "*assisted installer only.* `MUI_WELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](./contents.md#extraresources) or to the project directory. Defaults to `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`. Image size 164 × 314 pixels."
        },
        "uninstallerSidebar": {
          "type": [
            "string",
            "null"
          ],
          "description": "*assisted installer only.* `MUI_UNWELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](./contents.md#extraresources) or to the project directory. Defaults to `installerSidebar` option or `build/uninstallerSidebar.bmp` or `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`"
        },
        "uninstallDisplayName": {
          "type": "string",
          "description": "The uninstaller display name in the control panel.",
          "default": "${productName} ${version}"
        },
        "include": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](#custom-nsis-script)."
        },
        "script": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](#custom-nsis-script)."
        },
        "license": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt`, `rtf` and `html` supported (don't forget to use `target=\"_blank\"` for links).\n\nMultiple license files in different languages are supported — use lang postfix (e.g. `_de`, `_ru`). For example, create files `license_de.txt` and `license_en.txt` in the build resources. If OS language is german, `license_de.txt` will be displayed. See map of [language code to name](https://github.com/meikidd/iso-639-1/blob/master/src/data.js).\n\nAppropriate license file will be selected by user OS language."
        },
        "deleteAppDataOnUninstall": {
          "type": "boolean",
          "description": "*one-click installer only.* Whether to delete app data on uninstall.",
          "default": false
        },
        "differentialPackage": {
          "type": "boolean"
        },
        "displayLanguageSelector": {
          "type": "boolean",
          "description": "Whether to display a language selection dialog. Not recommended (by default will be detected using OS language).",
          "default": false
        },
        "installerLanguages": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The installer languages (e.g. `en_US`, `de_DE`). Change only if you understand what do you do and for what."
        },
        "language": {
          "type": [
            "string",
            "null"
          ],
          "description": "[LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`)."
        },
        "multiLanguageInstaller": {
          "type": "boolean",
          "description": "Whether to create multi-language installer. Defaults to `unicode` option value."
        },
        "packElevateHelper": {
          "type": "boolean",
          "description": "Whether to pack the elevate executable (required for electron-updater if per-machine installer used or can be used in the future). Ignored if `perMachine` is set to `true`.",
          "default": true
        },
        "preCompressedFileExtensions": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The file extension of files that will be not compressed. Applicable only for `extraResources` and `extraFiles` files.",
          "default": [
            ".avi",
            ".mov",
            ".m4v",
            ".mp4",
            ".m4p",
            ".qt",
            ".mkv",
            ".webm",
            ".vmdk"
          ]
        },
        "buildUniversalInstaller": {
          "type": "boolean",
          "description": "Disable building an universal installer of the archs specified in the target configuration\n*Not supported for nsis-web*",
          "default": true
        }
      },
      "additionalProperties": false
    },
    "CustomNsisBinary": {
      "type": "object",
      "properties": {
        "url": {
          "type": [
            "string",
            "null"
          ],
          "default": "https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-3.0.4.1/nsis-3.0.4.1.7z"
        },
        "checksum": {
          "type": [
            "string",
            "null"
          ],
          "default": "VKMiizYdmNdJOWpRGz4trl4lD++BvYP2irAXpMilheUP0pc93iKlWAoP843Vlraj8YG19CVn0j+dCo/hURz9+Q=="
        },
        "version": {
          "type": [
            "string",
            "null"
          ],
          "default": "3.0.4.1"
        },
        "debugLogging": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Whether or not to enable NSIS logging for debugging. Note: Requires a debug-enabled NSIS build. electron-builder's included `makensis` does not natively support debug-enabled NSIS installers currently, you must supply your own via `customNsisBinary?: CustomNsisBinary` In your custom nsis scripts, you can leverage this functionality via `LogSet` and `LogText`"
        }
      },
      "required": [
        "url"
      ],
      "additionalProperties": false
    },
    "CustomNsisResources": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "default": "https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-resources-3.4.1/nsis-resources-3.4.1.7z"
        },
        "checksum": {
          "type": "string",
          "default": "Dqd6g+2buwwvoG1Vyf6BHR1b+25QMmPcwZx40atOT57gH27rkjOei1L0JTldxZu4NFoEmW4kJgZ3DlSWVON3+Q=="
        },
        "version": {
          "type": "string",
          "default": "3.4.1"
        }
      },
      "required": [
        "url",
        "checksum",
        "version"
      ],
      "additionalProperties": false
    },
    "NsisWebOptions": {
      "type": "object",
      "properties": {
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template). Defaults to `${productName} Web Setup ${version}.${ext}`."
        },
        "publish": {
          "$ref": "#/definitions/Publish"
        },
        "oneClick": {
          "type": "boolean",
          "description": "Whether to create one-click installer or assisted.",
          "default": true
        },
        "perMachine": {
          "type": "boolean",
          "description": "Whether to show install mode installer page (choice per-machine or per-user) for assisted installer. Or whether installation always per all users (per-machine).\n\nIf `oneClick` is `true` (default): Whether to install per all users (per-machine).\n\nIf `oneClick` is `false` and `perMachine` is `true`: no install mode installer page, always install per-machine.\n\nIf `oneClick` is `false` and `perMachine` is `false` (default): install mode installer page.",
          "default": false
        },
        "runAfterFinish": {
          "type": "boolean",
          "description": "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
          "default": true
        },
        "createDesktopShortcut": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "const": "always"
            }
          ],
          "description": "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
          "default": true
        },
        "createStartMenuShortcut": {
          "type": "boolean",
          "description": "Whether to create start menu shortcut.",
          "default": true
        },
        "menuCategory": {
          "type": [
            "boolean",
            "string"
          ],
          "description": "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
          "default": false
        },
        "shortcutName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The name that will be used for all shortcuts. Defaults to the application name."
        },
        "unicode": {
          "type": "boolean",
          "description": "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
          "default": true
        },
        "guid": {
          "type": [
            "string",
            "null"
          ],
          "description": "See [GUID vs Application Name](./nsis.md#guid-vs-application-name)."
        },
        "warningsAsErrors": {
          "type": "boolean",
          "description": "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
          "default": true
        },
        "useZip": {
          "type": "boolean",
          "default": false
        },
        "customNsisBinary": {
          "anyOf": [
            {
              "$ref": "#/definitions/CustomNsisBinary"
            },
            {
              "type": "null"
            }
          ],
          "description": "Allows you to provide your own `makensis`, such as one with support for debug logging via LogSet and LogText. (Logging also requires option `debugLogging = true`)"
        },
        "customNsisResources": {
          "anyOf": [
            {
              "$ref": "#/definitions/CustomNsisResources"
            },
            {
              "type": "null"
            }
          ],
          "description": "Allows you to provide your own `nsis-resources`"
        },
        "selectPerMachineByDefault": {
          "type": "boolean",
          "description": "Whether to set per-machine or per-user installation as default selection on the install mode installer page.",
          "default": false
        },
        "allowElevation": {
          "type": "boolean",
          "description": "*assisted installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.",
          "default": true
        },
        "allowToChangeInstallationDirectory": {
          "type": "boolean",
          "description": "*assisted installer only.* Whether to allow user to change installation directory.",
          "default": false
        },
        "removeDefaultUninstallWelcomePage": {
          "type": "boolean",
          "description": "*assisted installer only.* remove the default uninstall welcome page.",
          "default": false
        },
        "installerIcon": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to installer icon, relative to the [build resources](./contents.md#extraresources) or to the project directory. Defaults to `build/installerIcon.ico` or application icon."
        },
        "uninstallerIcon": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to uninstaller icon, relative to the [build resources](./contents.md#extraresources) or to the project directory. Defaults to `build/uninstallerIcon.ico` or application icon."
        },
        "installerHeader": {
          "type": [
            "string",
            "null"
          ],
          "description": "*assisted installer only.* `MUI_HEADERIMAGE`, relative to the [build resources](./contents.md#extraresources) or to the project directory.",
          "default": "build/installerHeader.bmp"
        },
        "installerHeaderIcon": {
          "type": [
            "string",
            "null"
          ],
          "description": "*one-click installer only.* The path to header icon (above the progress bar), relative to the [build resources](./contents.md#extraresources) or to the project directory. Defaults to `build/installerHeaderIcon.ico` or application icon."
        },
        "installerSidebar": {
          "type": [
            "string",
            "null"
          ],
          "description": "*assisted installer only.* `MUI_WELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](./contents.md#extraresources) or to the project directory. Defaults to `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`. Image size 164 × 314 pixels."
        },
        "uninstallerSidebar": {
          "type": [
            "string",
            "null"
          ],
          "description": "*assisted installer only.* `MUI_UNWELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](./contents.md#extraresources) or to the project directory. Defaults to `installerSidebar` option or `build/uninstallerSidebar.bmp` or `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`"
        },
        "uninstallDisplayName": {
          "type": "string",
          "description": "The uninstaller display name in the control panel.",
          "default": "${productName} ${version}"
        },
        "include": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](#custom-nsis-script)."
        },
        "script": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](#custom-nsis-script)."
        },
        "license": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt`, `rtf` and `html` supported (don't forget to use `target=\"_blank\"` for links).\n\nMultiple license files in different languages are supported — use lang postfix (e.g. `_de`, `_ru`). For example, create files `license_de.txt` and `license_en.txt` in the build resources. If OS language is german, `license_de.txt` will be displayed. See map of [language code to name](https://github.com/meikidd/iso-639-1/blob/master/src/data.js).\n\nAppropriate license file will be selected by user OS language."
        },
        "deleteAppDataOnUninstall": {
          "type": "boolean",
          "description": "*one-click installer only.* Whether to delete app data on uninstall.",
          "default": false
        },
        "differentialPackage": {
          "type": "boolean"
        },
        "displayLanguageSelector": {
          "type": "boolean",
          "description": "Whether to display a language selection dialog. Not recommended (by default will be detected using OS language).",
          "default": false
        },
        "installerLanguages": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The installer languages (e.g. `en_US`, `de_DE`). Change only if you understand what do you do and for what."
        },
        "language": {
          "type": [
            "string",
            "null"
          ],
          "description": "[LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`)."
        },
        "multiLanguageInstaller": {
          "type": "boolean",
          "description": "Whether to create multi-language installer. Defaults to `unicode` option value."
        },
        "packElevateHelper": {
          "type": "boolean",
          "description": "Whether to pack the elevate executable (required for electron-updater if per-machine installer used or can be used in the future). Ignored if `perMachine` is set to `true`.",
          "default": true
        },
        "preCompressedFileExtensions": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The file extension of files that will be not compressed. Applicable only for `extraResources` and `extraFiles` files.",
          "default": [
            ".avi",
            ".mov",
            ".m4v",
            ".mp4",
            ".m4p",
            ".qt",
            ".mkv",
            ".webm",
            ".vmdk"
          ]
        },
        "buildUniversalInstaller": {
          "type": "boolean",
          "const": true,
          "description": "Override for `NsisOptions.buildUniversalInstaller`. nsis-web requires universal installer",
          "default": true
        },
        "appPackageUrl": {
          "type": [
            "string",
            "null"
          ],
          "description": "The application package download URL. Optional — by default computed using publish configuration.\n\nURL like `https://example.com/download/latest` allows web installer to be version independent (installer will download latest application package). Please note — it is [full URL](https://github.com/electron-userland/electron-builder/issues/1810#issuecomment-317650878).\n\nCustom `X-Arch` http header is set to `32` or `64`."
        }
      },
      "additionalProperties": false,
      "description": "Web Installer options."
    },
    "PortableOptions": {
      "type": "object",
      "properties": {
        "unicode": {
          "type": "boolean",
          "description": "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
          "default": true
        },
        "guid": {
          "type": [
            "string",
            "null"
          ],
          "description": "See [GUID vs Application Name](./nsis.md#guid-vs-application-name)."
        },
        "warningsAsErrors": {
          "type": "boolean",
          "description": "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
          "default": true
        },
        "useZip": {
          "type": "boolean",
          "default": false
        },
        "customNsisBinary": {
          "anyOf": [
            {
              "$ref": "#/definitions/CustomNsisBinary"
            },
            {
              "type": "null"
            }
          ],
          "description": "Allows you to provide your own `makensis`, such as one with support for debug logging via LogSet and LogText. (Logging also requires option `debugLogging = true`)"
        },
        "customNsisResources": {
          "anyOf": [
            {
              "$ref": "#/definitions/CustomNsisResources"
            },
            {
              "type": "null"
            }
          ],
          "description": "Allows you to provide your own `nsis-resources`"
        },
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template)."
        },
        "publish": {
          "$ref": "#/definitions/Publish"
        },
        "requestExecutionLevel": {
          "type": "string",
          "enum": [
            "user",
            "highest",
            "admin"
          ],
          "description": "The [requested execution level](http://nsis.sourceforge.net/Reference/RequestExecutionLevel) for Windows.",
          "default": "user"
        },
        "unpackDirName": {
          "type": [
            "string",
            "boolean"
          ],
          "description": "The unpack directory for the portable app resources.\n\nIf set to a string, it will be the name in [TEMP](https://www.askvg.com/where-does-windows-store-temporary-files-and-how-to-change-temp-folder-location/) directory If set explicitly to `false`, it will use the Windows temp directory ($PLUGINSDIR) that is unique to each launch of the portable application.\n\nDefaults to [uuid](https://github.com/segmentio/ksuid) of build (changed on each build of portable executable)."
        },
        "splashImage": {
          "type": [
            "string",
            "null"
          ],
          "description": "The image to show while the portable executable is extracting. This image must be a bitmap (`.bmp`) image."
        },
        "buildUniversalInstaller": {
          "type": "boolean",
          "description": "Disable building an universal installer of the archs specified in the target configuration",
          "default": true
        }
      },
      "additionalProperties": false,
      "description": "Portable options."
    },
    "AppXOptions": {
      "type": "object",
      "properties": {
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template)."
        },
        "publish": {
          "$ref": "#/definitions/Publish"
        },
        "applicationId": {
          "type": "string",
          "description": "The application id. Defaults to `identityName`. This string contains alpha-numeric fields separated by periods. Each field must begin with an ASCII alphabetic character."
        },
        "backgroundColor": {
          "type": [
            "string",
            "null"
          ],
          "description": "The background color of the app tile. See [Visual Elements](https://msdn.microsoft.com/en-us/library/windows/apps/br211471.aspx).",
          "default": "#464646"
        },
        "displayName": {
          "type": [
            "string",
            "null"
          ],
          "description": "A friendly name that can be displayed to users. Corresponds to [Properties.DisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211432.aspx). Defaults to the application product name."
        },
        "identityName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The name. Corresponds to [Identity.Name](https://msdn.microsoft.com/en-us/library/windows/apps/br211441.aspx). Defaults to the [application name](./configuration.md#metadata)."
        },
        "publisher": {
          "type": [
            "string",
            "null"
          ],
          "description": "The Windows Store publisher. Not used if AppX is build for testing. See [AppX Package Code Signing](#appx-package-code-signing) below."
        },
        "publisherDisplayName": {
          "type": [
            "string",
            "null"
          ],
          "description": "A friendly name for the publisher that can be displayed to users. Corresponds to [Properties.PublisherDisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211460.aspx). Defaults to company name from the application metadata."
        },
        "languages": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The list of [supported languages](https://docs.microsoft.com/en-us/windows/uwp/globalizing/manage-language-and-region#specify-the-supported-languages-in-the-apps-manifest) that will be listed in the Windows Store. The first entry (index 0) will be the default language. Defaults to en-US if omitted."
        },
        "addAutoLaunchExtension": {
          "type": "boolean",
          "description": "Whether to add auto launch extension. Defaults to `true` if [electron-winstore-auto-launch](https://github.com/felixrieseberg/electron-winstore-auto-launch) in the dependencies."
        },
        "customExtensionsPath": {
          "type": "string",
          "description": "Relative path to custom extensions xml to be included in an `appmanifest.xml`."
        },
        "customManifestPath": {
          "type": "string",
          "description": "(Advanced Option) Relative path to custom `appmanifest.xml` (file name doesn't matter, it'll be renamed) located in build resources directory. Supports the following template macros:\n\n- ${publisher}\n- ${publisherDisplayName}\n- ${version}\n- ${applicationId}\n- ${identityName}\n- ${executable}\n- ${displayName}\n- ${description}\n- ${backgroundColor}\n- ${logo}\n- ${square150x150Logo}\n- ${square44x44Logo}\n- ${lockScreen}\n- ${defaultTile}\n- ${splashScreen}\n- ${arch}\n- ${resourceLanguages}\n- ${extensions}\n- ${minVersion}\n- ${maxVersionTested}"
        },
        "showNameOnTiles": {
          "type": "boolean",
          "description": "Whether to overlay the app's name on top of tile images on the Start screen. Defaults to `false`. (https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-uap-shownameontiles) in the dependencies.",
          "default": false
        },
        "electronUpdaterAware": {
          "type": "boolean",
          "default": false
        },
        "setBuildNumber": {
          "type": "boolean",
          "description": "Whether to set build number. See https://github.com/electron-userland/electron-builder/issues/3875",
          "default": false
        },
        "minVersion": {
          "type": [
            "string",
            "null"
          ],
          "description": "Set the MinVersion field in the appx manifest.xml",
          "default": "arch === Arch.arm64 ? \"10.0.16299.0\" : \"10.0.14316.0\""
        },
        "maxVersionTested": {
          "type": [
            "string",
            "null"
          ],
          "description": "Set the `MaxVersionTested` field in the appx manifest.xml",
          "default": "arch === Arch.arm64 ? \"10.0.16299.0\" : \"10.0.14316.0\""
        },
        "makeappxArgs": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "MsiOptions": {
      "type": "object",
      "properties": {
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template)."
        },
        "publish": {
          "$ref": "#/definitions/Publish"
        },
        "oneClick": {
          "type": "boolean",
          "description": "One-click installation.",
          "default": true
        },
        "perMachine": {
          "type": "boolean",
          "description": "Whether to install per all users (per-machine).",
          "default": false
        },
        "runAfterFinish": {
          "type": "boolean",
          "description": "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
          "default": true
        },
        "createDesktopShortcut": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "const": "always"
            }
          ],
          "description": "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
          "default": true
        },
        "createStartMenuShortcut": {
          "type": "boolean",
          "description": "Whether to create start menu shortcut.",
          "default": true
        },
        "menuCategory": {
          "type": [
            "boolean",
            "string"
          ],
          "description": "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
          "default": false
        },
        "shortcutName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The name that will be used for all shortcuts. Defaults to the application name."
        },
        "upgradeCode": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [upgrade code](https://msdn.microsoft.com/en-us/library/windows/desktop/aa372375(v=vs.85).aspx). Optional, by default generated using app id."
        },
        "warningsAsErrors": {
          "type": "boolean",
          "description": "If `warningsAsErrors` is `true` (default): treat warnings as errors. If `warningsAsErrors` is `false`: allow warnings.",
          "default": true
        },
        "additionalWixArgs": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "Any additional arguments to be passed to the WiX installer compiler, such as `[\"-ext\", \"WixUtilExtension\"]`"
        },
        "additionalLightArgs": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "Any additional arguments to be passed to the light.ext, such as `[\"-cultures:ja-jp\"]`"
        }
      },
      "additionalProperties": false
    },
    "MsiWrappedOptions": {
      "type": "object",
      "properties": {
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template)."
        },
        "publish": {
          "$ref": "#/definitions/Publish"
        },
        "oneClick": {
          "type": "boolean"
        },
        "perMachine": {
          "type": "boolean",
          "description": "Whether to install per all users (per-machine).",
          "default": false
        },
        "runAfterFinish": {
          "type": "boolean",
          "description": "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
          "default": true
        },
        "createDesktopShortcut": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "const": "always"
            }
          ],
          "description": "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
          "default": true
        },
        "createStartMenuShortcut": {
          "type": "boolean",
          "description": "Whether to create start menu shortcut.",
          "default": true
        },
        "menuCategory": {
          "type": [
            "boolean",
            "string"
          ],
          "description": "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
          "default": false
        },
        "shortcutName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The name that will be used for all shortcuts. Defaults to the application name."
        },
        "wrappedInstallerArgs": {
          "type": [
            "string",
            "null"
          ],
          "description": "Extra arguments to provide to the wrapped installer (ie: /S for silent install)"
        },
        "impersonate": {
          "type": "boolean",
          "description": "Determines if the wrapped installer should be executed with impersonation",
          "default": false
        },
        "upgradeCode": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [upgrade code](https://msdn.microsoft.com/en-us/library/windows/desktop/aa372375(v=vs.85).aspx). Optional, by default generated using app id."
        },
        "warningsAsErrors": {
          "type": "boolean",
          "description": "If `warningsAsErrors` is `true` (default): treat warnings as errors. If `warningsAsErrors` is `false`: allow warnings.",
          "default": true
        },
        "additionalWixArgs": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "Any additional arguments to be passed to the WiX installer compiler, such as `[\"-ext\", \"WixUtilExtension\"]`"
        }
      },
      "additionalProperties": false
    },
    "SquirrelWindowsOptions": {
      "type": "object",
      "properties": {
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template)."
        },
        "publish": {
          "$ref": "#/definitions/Publish"
        },
        "iconUrl": {
          "type": [
            "string",
            "null"
          ],
          "description": "A URL to an ICO file to use as the application icon (displayed in Control Panel > Programs and Features). Defaults to the Electron icon.\n\nPlease note — [local icon file url is not accepted](https://github.com/atom/grunt-electron-installer/issues/73), must be https/http.\n\nIf you don't plan to build windows installer, you can omit it. If your project repository is public on GitHub, it will be `https://github.com/${u}/${p}/blob/master/build/icon.ico?raw=true` by default."
        },
        "loadingGif": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to a .gif file to display during install. `build/install-spinner.gif` will be used if exists (it is a recommended way to set) (otherwise [default](https://github.com/electron/windows-installer/blob/master/resources/install-spinner.gif))."
        },
        "msi": {
          "type": "boolean",
          "description": "Whether to create an MSI installer. Defaults to `false` (MSI is not created)."
        },
        "remoteReleases": {
          "type": [
            "string",
            "boolean",
            "null"
          ],
          "description": "A URL to your existing updates. Or `true` to automatically set to your GitHub repository. If given, these will be downloaded to create delta updates."
        },
        "remoteToken": {
          "type": [
            "string",
            "null"
          ],
          "description": "Authentication token for remote updates"
        },
        "useAppIdAsId": {
          "type": "boolean",
          "description": "Use `appId` to identify package instead of `name`."
        },
        "customSquirrelVendorDir": {
          "type": "string",
          "description": "The custom squirrel vendor dir. If not specified will use the Squirrel.Windows that is shipped with electron-installer(https://github.com/electron/windows-installer/tree/main/vendor). After https://github.com/electron-userland/electron-builder-binaries/pull/56 merged, will add `electron-builder-binaries` to get the latest version of squirrel."
        },
        "name": {
          "type": "string",
          "description": "https://github.com/electron-userland/electron-builder/issues/1743"
        }
      },
      "additionalProperties": false
    },
    "LinuxConfiguration": {
      "type": "object",
      "properties": {
        "files": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A [glob patterns](./file-patterns.md) relative to the [app directory](configuration.md#directories), which specifies which files to include when copying files to create the package.\n\nDefaults to: ```json [ \"**\\/*\", \"!**\\/node_modules/*\\/{CHANGELOG.md,README.md,README,readme.md,readme}\", \"!**\\/node_modules/*\\/{test,__tests__,tests,powered-test,example,examples}\", \"!**\\/node_modules/*.d.ts\", \"!**\\/node_modules/.bin\", \"!**\\/*.{iml,o,hprof,orig,pyc,pyo,rbc,swp,csproj,sln,xproj}\", \"!.editorconfig\", \"!**\\/._*\", \"!**\\/{.DS_Store,.git,.hg,.svn,CVS,RCS,SCCS,.gitignore,.gitattributes}\", \"!**\\/{__pycache__,thumbs.db,.flowconfig,.idea,.vs,.nyc_output}\", \"!**\\/{appveyor.yml,.travis.yml,circle.yml}\", \"!**\\/{npm-debug.log,yarn.lock,.yarn-integrity,.yarn-metadata.json}\" ] ```\n\nDevelopment dependencies are never copied in any case. You don't need to ignore it explicitly. Hidden files are not ignored by default, but all files that should be ignored, are ignored by default.\n\nDefault pattern \\`**\\/*\\` **is not added to your custom** if some of your patterns is not ignore (i.e. not starts with `!`). `package.json` and \\`**\\/node_modules/**\\/*` (only production dependencies will be copied) is added to your custom in any case. All default ignores are added in any case — you don't need to repeat it if you configure own patterns.\n\nMay be specified in the platform options (e.g. in the [mac](mac.md)).\n\nYou may also specify custom source and destination directories by using `FileSet` objects instead of simple glob patterns.\n\n```json [ { \"from\": \"path/to/source\", \"to\": \"path/to/destination\", \"filter\": [\"**\\/*\", \"!foo/*.js\"] } ] ```\n\nYou can use [file macros](./file-patterns.md#file-macros) in the `from` and `to` fields as well. `from` and `to` can be files and you can use this to [rename](https://github.com/electron-userland/electron-builder/issues/1119) a file while packaging."
        },
        "extraResources": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A [glob patterns](./file-patterns.md) relative to the project directory, when specified, copy the file or directory with matching names directly into the app's resources directory (`Contents/Resources` for MacOS, `resources` for Linux and Windows).\n\nFile patterns (and support for `from` and `to` fields) the same as for [files](#files)."
        },
        "extraFiles": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The same as [extraResources](#extraresources) but copy into the app's content directory (`Contents` for MacOS, root directory for Linux and Windows)."
        },
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options)."
        },
        "publish": {
          "$ref": "#/definitions/Publish",
          "description": "Publisher configuration. See [Auto Update](./publish.md) for more information."
        },
        "appId": {
          "type": [
            "string",
            "null"
          ],
          "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as [Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
          "default": "com.electron.${name}"
        },
        "executableName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The executable name. Defaults to `productName`."
        },
        "compression": {
          "anyOf": [
            {
              "$ref": "#/definitions/CompressionLevel"
            },
            {
              "type": "null"
            }
          ],
          "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.",
          "default": "normal"
        },
        "disableDefaultIgnoredFiles": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Whether to exclude all default ignored files(https://www.electron.build/contents#files) and options. Defaults to `false`.",
          "default": false
        },
        "asar": {
          "anyOf": [
            {
              "$ref": "#/definitions/AsarOptions"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#asarUnpack) - please file an issue if this doesn't work.",
          "default": true
        },
        "asarUnpack": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A [glob patterns](./file-patterns.md) relative to the [app directory](#directories), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive."
        },
        "icon": {
          "type": "string",
          "description": "The path to icon set directory or one png file, relative to the [build resources](./contents.md#extraresources) or to the project directory. The icon filename must contain the size (e.g. 32x32.png) of the icon. By default will be generated automatically based on the macOS icns file."
        },
        "fileAssociations": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileAssociation"
              }
            },
            {
              "$ref": "#/definitions/FileAssociation"
            }
          ],
          "description": "The file associations."
        },
        "protocols": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Protocol"
              }
            },
            {
              "$ref": "#/definitions/Protocol"
            }
          ],
          "description": "The URL protocol schemes."
        },
        "electronLanguages": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ],
          "description": "The electron locales to keep. By default, all Electron locales used as-is."
        },
        "forceCodeSigning": {
          "type": "boolean",
          "description": "Whether to fail if app will be not code signed."
        },
        "electronUpdaterCompatibility": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [electron-updater compatibility](./auto-update.md#compatibility) semver range."
        },
        "detectUpdateChannel": {
          "type": "boolean",
          "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`. This does *not* apply to github publishing, which will [never auto-detect the update channel](https://github.com/electron-userland/electron-builder/issues/8589).",
          "default": true
        },
        "generateUpdatesFilesForAllChannels": {
          "type": "boolean",
          "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
          "default": false
        },
        "releaseInfo": {
          "$ref": "#/definitions/ReleaseInfo",
          "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\" ```"
        },
        "target": {
          "$ref": "#/definitions/TargetConfigType",
          "description": "Target package type: list of `AppImage`, `flatpak`, `snap`, `deb`, `rpm`, `freebsd`, `pacman`, `p5p`, `apk`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`.\n\nelectron-builder [docker image](./multi-platform-build.md#docker) can be used to build Linux targets on any platform.\n\nPlease [do not put an AppImage into another archive](https://github.com/probonopd/AppImageKit/wiki/Creating-AppImages#common-mistake) like a .zip or .tar.gz.",
          "default": "AppImage"
        },
        "cscLink": {
          "type": [
            "string",
            "null"
          ]
        },
        "cscKeyPassword": {
          "type": [
            "string",
            "null"
          ]
        },
        "defaultArch": {
          "type": "string"
        },
        "synopsis": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description)."
        },
        "description": {
          "type": [
            "string",
            "null"
          ],
          "description": "As [description](./configuration.md#description) from application package.json, but allows you to specify different for Linux."
        },
        "category": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry)."
        },
        "mimeTypes": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing."
        },
        "desktop": {
          "anyOf": [
            {
              "$ref": "#/definitions/LinuxDesktopFile"
            },
            {
              "type": "null"
            }
          ],
          "description": "The [Desktop file](https://developer.gnome.org/documentation/guidelines/maintainer/integrating.html#desktop-files)"
        },
        "executableArgs": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "The executable parameters. Pass to executableName"
        },
        "maintainer": {
          "type": [
            "string",
            "null"
          ],
          "description": "The maintainer. Defaults to [author](./configuration.md#author)."
        },
        "vendor": {
          "type": [
            "string",
            "null"
          ],
          "description": "The vendor. Defaults to [author](./configuration.md#author)."
        },
        "packageCategory": {
          "type": [
            "string",
            "null"
          ],
          "description": "backward compatibility + to allow specify fpm-only category for all possible fpm targets in one place"
        }
      },
      "additionalProperties": false
    },
    "LinuxDesktopFile": {
      "type": "object",
      "properties": {
        "entry": {
          "anyOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "`[Desktop Entry]` metadata entries (name to value). Overwrites default values calculated by electron-builder"
        },
        "desktopActions": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "description": "`[Desktop Actions <ActionName>]` metadata entries (name to value).\n\nConfig Example: ```js desktopActions: {    NewWindow: {       Name: 'New Window',       Exec: 'app --new-window',    } } ```"
        }
      },
      "additionalProperties": false,
      "description": "Example Spec: https://specifications.freedesktop.org/desktop-entry-spec/latest/example.html"
    },
    "DebOptions": {
      "type": "object",
      "properties": {
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template)."
        },
        "publish": {
          "$ref": "#/definitions/Publish"
        },
        "synopsis": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description)."
        },
        "description": {
          "type": [
            "string",
            "null"
          ],
          "description": "As [description](./configuration.md#description) from application package.json, but allows you to specify different for Linux."
        },
        "category": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry)."
        },
        "mimeTypes": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing."
        },
        "desktop": {
          "anyOf": [
            {
              "$ref": "#/definitions/LinuxDesktopFile"
            },
            {
              "type": "null"
            }
          ],
          "description": "The [Desktop file](https://developer.gnome.org/documentation/guidelines/maintainer/integrating.html#desktop-files)"
        },
        "executableArgs": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "The executable parameters. Pass to executableName"
        },
        "depends": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "Package dependencies. If need to support Debian, `libappindicator1` should be removed, it is [deprecated in Debian](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=895037). If need to support KDE, `gconf2` and `gconf-service` should be removed as it's no longer used [by GNOME](https://packages.debian.org/bullseye/gconf2).",
          "default": [
            "libgtk-3-0",
            "libnotify4",
            "libnss3",
            "libxss1",
            "libxtst6",
            "xdg-utils",
            "libatspi2.0-0",
            "libuuid1",
            "libsecret-1-0"
          ]
        },
        "compression": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "gz",
            "bzip2",
            "xz",
            "lzo",
            null
          ],
          "description": "The compression type.",
          "default": "xz"
        },
        "icon": {
          "type": "string"
        },
        "packageCategory": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [package category](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Section)."
        },
        "packageName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The name of the package."
        },
        "vendor": {
          "type": [
            "string",
            "null"
          ]
        },
        "maintainer": {
          "type": [
            "string",
            "null"
          ]
        },
        "afterInstall": {
          "type": [
            "string",
            "null"
          ],
          "description": "File path to script to be passed to FPM for `--after-install` arg."
        },
        "afterRemove": {
          "type": [
            "string",
            "null"
          ],
          "description": "File path to script to be passed to FPM for `--after-remove` arg."
        },
        "appArmorProfile": {
          "type": [
            "string",
            "null"
          ],
          "description": "File path to custom AppArmor profile (Ubuntu 24+)"
        },
        "fpm": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "*Advanced only* The [fpm](https://fpm.readthedocs.io/en/latest/cli-reference.html) options.\n\nExample: `[\"--before-install=build/deb-preinstall.sh\", \"--after-upgrade=build/deb-postinstall.sh\"]`"
        },
        "recommends": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "The [recommended package dependencies](https://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps).",
          "default": [
            "libappindicator3-1"
          ]
        },
        "priority": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [Priority](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Priority) attribute."
        }
      },
      "additionalProperties": false
    },
    "SnapOptions": {
      "type": "object",
      "properties": {
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template)."
        },
        "publish": {
          "$ref": "#/definitions/Publish"
        },
        "synopsis": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description)."
        },
        "description": {
          "type": [
            "string",
            "null"
          ],
          "description": "As [description](./configuration.md#description) from application package.json, but allows you to specify different for Linux."
        },
        "category": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry)."
        },
        "mimeTypes": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing."
        },
        "desktop": {
          "anyOf": [
            {
              "$ref": "#/definitions/LinuxDesktopFile"
            },
            {
              "type": "null"
            }
          ],
          "description": "The [Desktop file](https://developer.gnome.org/documentation/guidelines/maintainer/integrating.html#desktop-files)"
        },
        "executableArgs": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "The executable parameters. Pass to executableName"
        },
        "base": {
          "type": [
            "string",
            "null"
          ],
          "description": "A snap of type base to be used as the execution environment for this snap. Examples: `core`, `core18`, `core20`, `core22`. Defaults to `core20`"
        },
        "confinement": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "devmode",
            "strict",
            "classic",
            null
          ],
          "description": "The type of [confinement](https://snapcraft.io/docs/reference/confinement) supported by the snap.",
          "default": "strict"
        },
        "environment": {
          "anyOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "The custom environment. Defaults to `{\"TMPDIR: \"$XDG_RUNTIME_DIR\"}`. If you set custom, it will be merged with default."
        },
        "summary": {
          "type": [
            "string",
            "null"
          ],
          "description": "The 78 character long summary. Defaults to [productName](./configuration.md#productName)."
        },
        "grade": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "devel",
            "stable",
            null
          ],
          "description": "The quality grade of the snap. It can be either `devel` (i.e. a development version of the snap, so not to be published to the “stable” or “candidate” channels) or “stable” (i.e. a stable release or release candidate, which can be released to all channels).",
          "default": "stable"
        },
        "assumes": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The list of features that must be supported by the core in order for this snap to install."
        },
        "buildPackages": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "The list of debian packages needs to be installed for building this snap."
        },
        "stagePackages": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "The list of Ubuntu packages to use that are needed to support the `app` part creation. Like `depends` for `deb`. Defaults to `[\"libnspr4\", \"libnss3\", \"libxss1\", \"libappindicator3-1\", \"libsecret-1-0\"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `[\"default\", \"foo\"]` can be used to add custom package `foo` in addition to defaults."
        },
        "hooks": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [hooks](https://docs.snapcraft.io/build-snaps/hooks) directory, relative to `build` (build resources directory).",
          "default": "build/snap-hooks"
        },
        "plugs": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/PlugDescriptor"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/PlugDescriptor"
            },
            {
              "type": "null"
            }
          ],
          "description": "The list of [plugs](https://snapcraft.io/docs/reference/interfaces). Defaults to `[\"desktop\", \"desktop-legacy\", \"home\", \"x11\", \"wayland\", \"unity7\", \"browser-support\", \"network\", \"gsettings\", \"audio-playback\", \"pulseaudio\", \"opengl\"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `[\"default\", \"foo\"]` can be used to add custom plug `foo` in addition to defaults.\n\nAdditional attributes can be specified using object instead of just name of plug: ``` [  {    \"browser-sandbox\": {      \"interface\": \"browser-support\",      \"allow-sandbox\": true    },  },  \"another-simple-plug-name\" ] ```"
        },
        "slots": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/SlotDescriptor"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/PlugDescriptor"
            },
            {
              "type": "null"
            }
          ],
          "description": "The list of [slots](https://snapcraft.io/docs/reference/interfaces).\n\nAdditional attributes can be specified using object instead of just name of slot: ``` [  {    \"mpris\": {      \"name\": \"chromium\"    },  } ]\n\nIn case you want your application to be a compliant MPris player, you will need to definie The mpris slot with \"chromium\" name. This electron has it [hardcoded](https://source.chromium.org/chromium/chromium/src/+/master:components/system_media_controls/linux/system_media_controls_linux.cc;l=51;bpv=0;bpt=1), and we need to pass this name so snap [will allow it](https://forum.snapcraft.io/t/unable-to-use-mpris-interface/15360/7) in strict confinement."
        },
        "after": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "Specifies any [parts](https://snapcraft.io/docs/reference/parts) that should be built before this part. Defaults to `[\"desktop-gtk2\"\"]`.\n\nIf list contains `default`, it will be replaced to default list, so, `[\"default\", \"foo\"]` can be used to add custom parts `foo` in addition to defaults."
        },
        "useTemplateApp": {
          "type": "boolean",
          "description": "Whether to use template snap. Defaults to `true` if `stagePackages` not specified."
        },
        "autoStart": {
          "type": "boolean",
          "description": "Whether or not the snap should automatically start on login.",
          "default": false
        },
        "layout": {
          "anyOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "Specifies any files to make accessible from locations such as `/usr`, `/var`, and `/etc`. See [snap layouts](https://snapcraft.io/docs/snap-layouts) to learn more."
        },
        "appPartStage": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "Specifies which files from the app part to stage and which to exclude. Individual files, directories, wildcards, globstars, and exclusions are accepted. See [Snapcraft filesets](https://snapcraft.io/docs/snapcraft-filesets) to learn more about the format.\n\nThe defaults can be found in [snap.ts](https://github.com/electron-userland/electron-builder/blob/master/packages/app-builder-lib/templates/snap/snapcraft.yaml#L29)."
        },
        "title": {
          "type": [
            "string",
            "null"
          ],
          "description": "An optional title for the snap, may contain uppercase letters and spaces. Defaults to `productName`. See [snap format documentation](https://snapcraft.io/docs/snap-format)."
        },
        "compression": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "xz",
            "lzo",
            null
          ],
          "description": "Sets the compression type for the snap. Can be xz, lzo, or null."
        },
        "allowNativeWayland": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Allow running the program with native wayland support with --ozone-platform=wayland. Disabled by default because of this issue in older Electron/Snap versions: https://github.com/electron-userland/electron-builder/issues/4007"
        }
      },
      "additionalProperties": false
    },
    "PlugDescriptor": {
      "type": "object",
      "additionalProperties": {
        "anyOf": [
          {
            "type": "object"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "SlotDescriptor": {
      "type": "object",
      "additionalProperties": {
        "anyOf": [
          {
            "type": "object"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "AppImageOptions": {
      "type": "object",
      "properties": {
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template)."
        },
        "publish": {
          "$ref": "#/definitions/Publish"
        },
        "synopsis": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description)."
        },
        "description": {
          "type": [
            "string",
            "null"
          ],
          "description": "As [description](./configuration.md#description) from application package.json, but allows you to specify different for Linux."
        },
        "category": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry)."
        },
        "mimeTypes": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing."
        },
        "desktop": {
          "anyOf": [
            {
              "$ref": "#/definitions/LinuxDesktopFile"
            },
            {
              "type": "null"
            }
          ],
          "description": "The [Desktop file](https://developer.gnome.org/documentation/guidelines/maintainer/integrating.html#desktop-files)"
        },
        "executableArgs": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "The executable parameters. Pass to executableName"
        },
        "license": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). Only plain text is supported."
        }
      },
      "additionalProperties": false
    },
    "FlatpakOptions": {
      "type": "object",
      "properties": {
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template)."
        },
        "publish": {
          "$ref": "#/definitions/Publish"
        },
        "synopsis": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description)."
        },
        "description": {
          "type": [
            "string",
            "null"
          ],
          "description": "As [description](./configuration.md#description) from application package.json, but allows you to specify different for Linux."
        },
        "category": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry)."
        },
        "mimeTypes": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing."
        },
        "desktop": {
          "anyOf": [
            {
              "$ref": "#/definitions/LinuxDesktopFile"
            },
            {
              "type": "null"
            }
          ],
          "description": "The [Desktop file](https://developer.gnome.org/documentation/guidelines/maintainer/integrating.html#desktop-files)"
        },
        "executableArgs": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "The executable parameters. Pass to executableName"
        },
        "license": {
          "type": [
            "string",
            "null"
          ],
          "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). Only plain text is supported."
        },
        "runtime": {
          "type": "string",
          "description": "The name of the runtime that the application uses. Defaults to `org.freedesktop.Platform`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest)."
        },
        "runtimeVersion": {
          "type": "string",
          "description": "The version of the runtime that the application uses. Defaults to `20.08`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest)."
        },
        "sdk": {
          "type": "string",
          "description": "The name of the development runtime that the application builds with. Defaults to `org.freedesktop.Sdk`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest)."
        },
        "base": {
          "type": "string",
          "description": "Start with the files from the specified application. This can be used to create applications that extend another application. Defaults to [org.electronjs.Electron2.BaseApp](https://github.com/flathub/org.electronjs.Electron2.BaseApp).\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest)."
        },
        "baseVersion": {
          "type": "string",
          "description": "Use this specific version of the application specified in base. Defaults to `20.08`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest)."
        },
        "branch": {
          "type": "string",
          "description": "The branch to use when exporting the application. Defaults to `master`.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest)."
        },
        "finishArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of arguments passed to the flatpak build-finish command. Defaults to: ```json [   // Wayland/X11 Rendering   \"--socket=wayland\",   \"--socket=x11\",   \"--share=ipc\",   // Open GL   \"--device=dri\",   // Audio output   \"--socket=pulseaudio\",   // Read/write home directory access   \"--filesystem=home\",   // Allow communication with network   \"--share=network\",   // System notifications with libnotify   \"--talk-name=org.freedesktop.Notifications\", ] ```\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest)."
        },
        "modules": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ]
          },
          "description": "An array of objects specifying the modules to be built in order.\n\nSee [flatpak manifest documentation](https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html#flatpak-manifest)."
        },
        "files": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 2,
            "maxItems": 2
          },
          "description": "Files to copy directly into the app. Should be a list of [source, dest] tuples. Source should be a relative/absolute path to a file/directory to copy into the flatpak, and dest should be the path inside the app install prefix (e.g. /share/applications/).\n\nSee [@malept/flatpak-bundler documentation](https://github.com/malept/flatpak-bundler#build-options)."
        },
        "symlinks": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 2,
            "maxItems": 2
          },
          "description": "Symlinks to create in the app files. Should be a list of [target, location] symlink tuples. Target can be either a relative or absolute path inside the app install prefix, and location should be a absolute path inside the prefix to create the symlink at.\n\nSee [@malept/flatpak-bundler documentation](https://github.com/malept/flatpak-bundler#build-options)."
        },
        "useWaylandFlags": {
          "type": "boolean",
          "description": "Whether to enable the Wayland specific flags (`--enable-features=UseOzonePlatform --ozone-platform=wayland`) in the wrapper script. These flags are only available starting with Electron version 12. Defaults to `false`."
        }
      },
      "additionalProperties": false
    },
    "LinuxTargetSpecificOptions": {
      "type": "object",
      "properties": {
        "artifactName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [artifact file name template](./configuration.md#artifact-file-name-template)."
        },
        "publish": {
          "$ref": "#/definitions/Publish"
        },
        "synopsis": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description)."
        },
        "description": {
          "type": [
            "string",
            "null"
          ],
          "description": "As [description](./configuration.md#description) from application package.json, but allows you to specify different for Linux."
        },
        "category": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry)."
        },
        "mimeTypes": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing."
        },
        "desktop": {
          "anyOf": [
            {
              "$ref": "#/definitions/LinuxDesktopFile"
            },
            {
              "type": "null"
            }
          ],
          "description": "The [Desktop file](https://developer.gnome.org/documentation/guidelines/maintainer/integrating.html#desktop-files)"
        },
        "executableArgs": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "The executable parameters. Pass to executableName"
        },
        "depends": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "Package dependencies. `rpm` defaults to `[\"gtk3\", \"libnotify\", \"nss\", \"libXScrnSaver\", \"(libXtst or libXtst6)\", \"xdg-utils\", \"at-spi2-core\", \"(libuuid or libuuid1)\"]` `pacman` defaults to `[\"c-ares\", \"ffmpeg\", \"gtk3\", \"http-parser\", \"libevent\", \"libvpx\", \"libxslt\", \"libxss\", \"minizip\", \"nss\", \"re2\", \"snappy\", \"libnotify\", \"libappindicator-gtk3\"]`"
        },
        "compression": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "gz",
            "bzip2",
            "xz",
            "lzo",
            null
          ],
          "description": "The compression type.",
          "default": "xz"
        },
        "icon": {
          "type": "string"
        },
        "packageCategory": {
          "type": [
            "string",
            "null"
          ],
          "description": "The package category."
        },
        "packageName": {
          "type": [
            "string",
            "null"
          ],
          "description": "The name of the package."
        },
        "vendor": {
          "type": [
            "string",
            "null"
          ]
        },
        "maintainer": {
          "type": [
            "string",
            "null"
          ]
        },
        "afterInstall": {
          "type": [
            "string",
            "null"
          ],
          "description": "File path to script to be passed to FPM for `--after-install` arg."
        },
        "afterRemove": {
          "type": [
            "string",
            "null"
          ],
          "description": "File path to script to be passed to FPM for `--after-remove` arg."
        },
        "appArmorProfile": {
          "type": [
            "string",
            "null"
          ],
          "description": "File path to custom AppArmor profile (Ubuntu 24+)"
        },
        "fpm": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "*Advanced only* The [fpm](https://fpm.readthedocs.io/en/latest/cli-reference.html) options.\n\nExample: `[\"--before-install=build/deb-preinstall.sh\", \"--after-upgrade=build/deb-postinstall.sh\"]`"
        }
      },
      "additionalProperties": false
    },
    "FuseOptionsV1": {
      "type": "object",
      "properties": {
        "runAsNode": {
          "type": "boolean",
          "description": "The runAsNode fuse toggles whether the `ELECTRON_RUN_AS_NODE` environment variable is respected or not.  Please note that if this fuse is disabled then `process.fork` in the main process will not function as expected as it depends on this environment variable to function. Instead, we recommend that you use [Utility Processes](https://github.com/electron/electron/blob/main/docs/api/utility-process.md), which work for many use cases where you need a standalone Node.js process (like a Sqlite server process or similar scenarios)."
        },
        "enableCookieEncryption": {
          "type": "boolean",
          "description": "The cookieEncryption fuse toggles whether the cookie store on disk is encrypted using OS level cryptography keys.  By default the sqlite database that Chromium uses to store cookies stores the values in plaintext.  If you wish to ensure your apps cookies are encrypted in the same way Chrome does then you should enable this fuse.  Please note it is a one-way transition, if you enable this fuse existing unencrypted cookies will be encrypted-on-write but if you then disable the fuse again your cookie store will effectively be corrupt and useless.  Most apps can safely enable this fuse."
        },
        "enableNodeOptionsEnvironmentVariable": {
          "type": "boolean",
          "description": "The nodeOptions fuse toggles whether the [`NODE_OPTIONS`](https://nodejs.org/api/cli.html#node_optionsoptions)  and [`NODE_EXTRA_CA_CERTS`](https://github.com/nodejs/node/blob/main/doc/api/cli.md#node_extra_ca_certsfile) environment variables are respected.  The `NODE_OPTIONS` environment variable can be used to pass all kinds of custom options to the Node.js runtime and isn't typically used by apps in production.  Most apps can safely disable this fuse."
        },
        "enableNodeCliInspectArguments": {
          "type": "boolean",
          "description": "The nodeCliInspect fuse toggles whether the `--inspect`, `--inspect-brk`, etc. flags are respected or not.  When disabled it also ensures that `SIGUSR1` signal does not initialize the main process inspector.  Most apps can safely disable this fuse."
        },
        "enableEmbeddedAsarIntegrityValidation": {
          "type": "boolean",
          "description": "The embeddedAsarIntegrityValidation fuse toggles an experimental feature on macOS that validates the content of the `app.asar` file when it is loaded.  This feature is designed to have a minimal performance impact but may marginally slow down file reads from inside the `app.asar` archive. Currently, ASAR integrity checking is supported on:\n\n - macOS as of electron>=16.0.0  - Windows as of electron>=30.0.0\n\nFor more information on how to use asar integrity validation please read the [Asar Integrity](https://github.com/electron/electron/blob/main/docs/tutorial/asar-integrity.md) documentation."
        },
        "onlyLoadAppFromAsar": {
          "type": "boolean",
          "description": "The onlyLoadAppFromAsar fuse changes the search system that Electron uses to locate your app code.  By default Electron will search in the following order `app.asar` -> `app` -> `default_app.asar`.  When this fuse is enabled the search order becomes a single entry `app.asar` thus ensuring that when combined with the `embeddedAsarIntegrityValidation` fuse it is impossible to load non-validated code."
        },
        "loadBrowserProcessSpecificV8Snapshot": {
          "type": "boolean",
          "description": "The loadBrowserProcessSpecificV8Snapshot fuse changes which V8 snapshot file is used for the browser process.  By default Electron's processes will all use the same V8 snapshot file.  When this fuse is enabled the browser process uses the file called `browser_v8_context_snapshot.bin` for its V8 snapshot. The other processes will use the V8 snapshot file that they normally do."
        },
        "grantFileProtocolExtraPrivileges": {
          "type": "boolean",
          "description": "The grantFileProtocolExtraPrivileges fuse changes whether pages loaded from the `file://` protocol are given privileges beyond what they would receive in a traditional web browser.  This behavior was core to Electron apps in original versions of Electron but is no longer required as apps should be [serving local files from custom protocols](https://github.com/electron/electron/blob/main/docs/tutorial/security.md#18-avoid-usage-of-the-file-protocol-and-prefer-usage-of-custom-protocols) now instead.  If you aren't serving pages from `file://` you should disable this fuse. The extra privileges granted to the `file://` protocol by this fuse are incompletely documented below:\n\n - `file://` protocol pages can use `fetch` to load other assets over `file://`  - `file://` protocol pages can use service workers  - `file://` protocol pages have universal access granted to child frames also running on `file://` protocols regardless of sandbox settings"
        },
        "resetAdHocDarwinSignature": {
          "type": "boolean",
          "description": "Resets the app signature, specifically used for macOS. Note: This should be unneeded since electron-builder signs the app directly after flipping the fuses. Ref: https://github.com/electron/fuses?tab=readme-ov-file#apple-silicon"
        }
      },
      "additionalProperties": false,
      "description": "All options come from [@electron/fuses](https://github.com/electron/fuses) Ref: https://raw.githubusercontent.com/electron/electron/refs/heads/main/docs/tutorial/fuses.md"
    },
    "Concurrency": {
      "type": "object",
      "properties": {
        "jobs": {
          "type": "number",
          "description": "The maximum number of concurrent jobs to run.",
          "default": 1
        }
      },
      "required": [
        "jobs"
      ],
      "additionalProperties": false
    },
    "ElectronDownloadOptions": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "cache": {
          "type": [
            "string",
            "null"
          ],
          "description": "The [cache location](https://github.com/electron-userland/electron-download#cache-location)."
        },
        "mirror": {
          "type": [
            "string",
            "null"
          ],
          "description": "The mirror."
        },
        "customDir": {
          "type": [
            "string",
            "null"
          ]
        },
        "customFilename": {
          "type": [
            "string",
            "null"
          ]
        },
        "strictSSL": {
          "type": "boolean"
        },
        "isVerifyChecksum": {
          "type": "boolean"
        },
        "platform": {
          "$ref": "#/definitions/ElectronPlatformName"
        },
        "arch": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ElectronBrandingOptions": {
      "type": "object",
      "properties": {
        "projectName": {
          "type": "string"
        },
        "productName": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "description": "Electron distributables branding options."
    }
  }
}